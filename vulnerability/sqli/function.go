package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{
	/* this function uses prepared statements with context to get Profile data from database securely */

	// Create context with timeout for better resource management
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p, Users as u 
					WHERE p.user_id = u.id 
					AND u.id = ?`
	
	// Using prepared statements for additional security layer
	stmt, err := DB.Prepare(getProfileSql)
	if err != nil {
		log.Printf("Prepare error: %s", err.Error())
		return errors.New("database preparation error")
	}
	defer stmt.Close()
	
	// Execute the query with context and parameters
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil{
		// Improved error handling to avoid exposing DB errors to clients
		log.Printf("Query error: %s", err.Error())
		return errors.New("unable to retrieve profile data")
	}
	defer rows.Close()
	
	foundRows := false
	for rows.Next(){
		foundRows = true
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return errors.New("error processing profile data")
		}
	}
	
	// Check for errors that occurred during iteration
	if err = rows.Err(); err != nil {
		log.Printf("Rows iteration error: %s", err.Error())
		return errors.New("error processing database results")
	}
	
	if !foundRows {
		return errors.New("no records found")
	}
	
	return nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
