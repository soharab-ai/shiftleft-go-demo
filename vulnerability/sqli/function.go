package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile) UnsafeQueryGetData(uid string) error {
    /* this function use to get data Profile from database with secure query */

    // Add input validation to ensure uid contains only expected characters (digits)
    if !regexp.MustCompile(`^[0-9]+$`).MatchString(uid) {
        return fmt.Errorf("invalid user ID format")
    }
    
    // Implement content-based validation for maximum length
    if len(uid) > 20 {
        return fmt.Errorf("user ID exceeds maximum allowed length")
    }
    
    // Create context with timeout for database operations
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()
    
    // Begin a transaction for better security and integrity
    tx, err := DB.BeginTx(ctx, nil)
    if err != nil {
        return fmt.Errorf("failed to begin transaction: %w", err)
    }
    defer tx.Rollback() // Will rollback if not committed
    
    // Use parameterized query with placeholders
    getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
                    FROM Profile as p, Users as u 
                    WHERE p.user_id = u.id 
                    AND u.id = ?`
    
    // Create and use prepared statement
    stmt, err := tx.PrepareContext(ctx, getProfileSql)
    if err != nil {
        return fmt.Errorf("failed to prepare statement: %w", err)
    }
    defer stmt.Close()
    
    // Execute the prepared statement with parameters
    rows, err := stmt.QueryContext(ctx, uid)
    if err != nil {
        return fmt.Errorf("query execution failed: %w", err)
    }
    defer rows.Close()
    
    found := false
    for rows.Next() {
        found = true
        err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
        if err != nil {
            log.Printf("Row scan error: %s", err.Error())
            return fmt.Errorf("data scan error: %w", err)
        }
    }
    
    if err = rows.Err(); err != nil {
        return fmt.Errorf("error iterating rows: %w", err)
    }
    
    if !found {
        return fmt.Errorf("no data found")
    }
    
    // Commit the transaction
    if err = tx.Commit(); err != nil {
        return fmt.Errorf("failed to commit transaction: %w", err)
    }
    
    return nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
