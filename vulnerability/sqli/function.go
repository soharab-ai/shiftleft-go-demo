package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{

	/* this function uses parameterized queries to prevent SQL injection */
	
	// Input length restriction to prevent overly long inputs
	if len(uid) > 20 {  // Added input length restriction
		return fmt.Errorf("invalid user ID length")
	}
	
	// Validate that uid contains only digits
	if !isValidUserId(uid) {
		return fmt.Errorf("invalid user ID format")
	}
	
	// Convert string to integer to enforce numeric type
	_, err := strconv.Atoi(uid)
	if err != nil {
		return fmt.Errorf("invalid user ID format")
	}
	
	// Using parameterized query instead of string concatenation
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p, Users as u 
					where p.user_id = u.id 
					and u.id=?` // Using parameter placeholder
	
	// Create context with timeout for the query
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)  // Added context with timeout
	defer cancel()
	
	// Use prepared statements explicitly
	stmt, err := DB.PrepareContext(ctx, getProfileSql)  // Using explicit prepared statement
	if err != nil {
		log.Printf("Prepare error: %s", err.Error())
		return fmt.Errorf("error preparing database query")
	}
	defer stmt.Close()
	
	// Execute the query with context
	rows, err := stmt.QueryContext(ctx, uid)  // Using QueryContext with timeout
	if err != nil {
		// Don't expose raw DB errors to client
		log.Printf("Query error: %s", err.Error())
		return fmt.Errorf("error retrieving profile data")
	}
	defer rows.Close()
	
	found := false
	for rows.Next(){
		found = true
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return fmt.Errorf("error processing profile data")
		}
	}
	
	if !found {
		return fmt.Errorf("profile not found")
	}
	
	return nil
}

// Helper function to validate user ID format
func isValidUserId(uid string) bool {
	// Query whitelisting implementation - only accepting digits
	for _, c := range uid {
		if c < '0' || c > '9' {
			return false
		}
	}
	return len(uid) > 0 // Ensure the string is not empty
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
