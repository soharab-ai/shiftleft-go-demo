package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile) UnsafeQueryGetData(uid string) error {
	/* this function uses prepared statements with parameterized queries to prevent SQL injection */
	
	// Get logger instance
	logger, _ := zap.NewProduction()
	defer logger.Sync()
	
	// Using prepared statement with parameterized query
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p, Users as u 
					WHERE p.user_id = u.id 
					AND u.id=?`
	
	// Create context with timeout for the database query
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	// Prepare statement for better security and performance
	stmt, err := DB.Prepare(getProfileSql)
	if err != nil {
		logger.Error("Failed to prepare SQL statement",
			zap.Error(err),
		)
		return err
	}
	defer stmt.Close()
	
	// Execute query using prepared statement and context
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil {
		logger.Error("Database query failed",
			zap.String("user_id", uid),
			zap.Error(err),
		)
		return err
	}
	defer rows.Close()
	
	for rows.Next() {
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil {
			logger.Error("Row scan error",
				zap.String("user_id", uid),
				zap.Error(err),
			)
			return err
		}
	}
	return nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
