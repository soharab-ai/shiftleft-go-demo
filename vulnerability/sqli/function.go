package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{
// Prepared statement stored at package level for reuse
var getProfileStmt *sql.Stmt

// Initialize prepares SQL statements and should be called at application startup
func Initialize(db *sql.DB) error {
    // Added: Use prepared statements for better security and performance
    var err error
    getProfileStmt, err = db.Prepare(`SELECT p.user_id, p.full_name, p.city, p.phone_number 
                          FROM Profile as p, Users as u 
                          WHERE p.user_id = u.id AND u.id=?`)
    if err != nil {
        return fmt.Errorf("failed to prepare statement: %w", err)
    }
    return nil
}

func(p *Profile)UnsafeQueryGetData(uid string)error{
    /* this function uses parameterized queries with multiple security layers to get Profile data from database securely */

    // Added: More robust UID validation using regex
    if !validateUID(uid) {
        return errors.New("invalid user ID format")
    }

    // Added: Use context with timeout to prevent long-running queries
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()
    
    // Added: Query whitelisting check
    if !isWhitelistedQuery("getProfile") {
        return errors.New("unauthorized query operation")
    }
    
    // Added: Use prepared statement with context
    rows, err := getProfileStmt.QueryContext(ctx, uid)
    if err != nil{
        return err
    }
    defer rows.Close()
    
    for rows.Next(){
        err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
        if err != nil{
            // Added: Safe error logging, avoiding potential log injection
            log.Printf("Row scan error: %s", sanitizeLogMessage(err.Error()))
            return err
        }
    }
    
    // Check for errors encountered during iteration
    if err = rows.Err(); err != nil {
        return err
    }
    
    return nil
}

// Added: Enhanced validation using regex
func validateUID(uid string) bool {
    // Use regex for validation - only digits allowed
    match, _ := regexp.MatchString(`^[0-9]+$`, uid)
    return match && len(uid) <= 36 // Add length validation
}

// Added: Query whitelisting function to validate operations
func isWhitelistedQuery(operation string) bool {
    whitelist := map[string]bool{
        "getProfile": true,
        "updateProfile": true,
        // Add other allowed operations
    }
    return whitelist[operation]
}

// Added: Sanitize log messages to prevent log injection
func sanitizeLogMessage(message string) string {
    // Basic sanitization - remove control characters
    sanitized := regexp.MustCompile(`[\x00-\x1F\x7F]`).ReplaceAllString(message, "")
    return sanitized
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
