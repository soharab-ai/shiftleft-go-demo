package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{

	/* this funciton use to get data Profile from database with vulnerable query */

// Configure connection pooling parameters to prevent resource exhaustion
func init() {
    DB.SetMaxOpenConns(25)
    DB.SetMaxIdleConns(25)
    DB.SetConnMaxLifetime(5 * time.Minute)
}

// getProfileByUID retrieves user profile information using a secure approach
func getProfileByUID(uid int64) error {
    // Input validation before database operation
    if uid <= 0 {
        return fmt.Errorf("invalid user identifier")
    }

    // Database layer abstraction using sqlx
    dbx := sqlx.NewDb(DB, "mysql") // Assuming MySQL, adjust accordingly
    defer dbx.Close()

    // SQL query with placeholder for parameterization
    getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
                    FROM Profile as p, Users as u 
                    WHERE p.user_id = u.id 
                    AND u.id = ?`
    
    // Create context with timeout for query cancellation
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()
    
    // Use prepared statement for better security and performance
    stmt, err := dbx.PreparexContext(ctx, getProfileSql)
    if err != nil {
        log.Printf("Statement preparation failed: %v", err)
        return fmt.Errorf("system error occurred")
    }
    defer stmt.Close()
    
    // Execute query with parameter passed separately for safe handling
    rows, err := stmt.QueryxContext(ctx, uid)
    if err != nil {
        // Log the actual error but return a generic message to client
        log.Printf("Database query error: %v", err)
        return fmt.Errorf("error retrieving profile data")
    }
    defer rows.Close()
    
    // Process the results here
    // var profile = Profilenull
    // Code to scan rows and populate profile object would go here
    
    return nil
}

	for rows.Next(){
		err = rows.Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return err
		}
	}
	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
