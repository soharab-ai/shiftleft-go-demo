package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile) UnsafeQueryGetData(uid string) error {
    // Added context with timeout for database operations
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()
    
    // Enhanced input validation beyond simple numeric check
    id, err := strconv.Atoi(uid)
    if err != nil || id <= 0 {
        logger.Error("Invalid user ID format", zap.String("uid", uid))
        return NewDBError("invalid_input", "Invalid user ID format", nil)
    }
    
    // Use explicit prepared statement for better security and performance
    stmt, err := DB.PrepareContext(ctx, `SELECT p.user_id, p.full_name, p.city, p.phone_number 
                                       FROM Profile as p, Users as u 
                                       WHERE p.user_id = u.id 
                                       AND u.id=?`)
    if err != nil {
        logger.Error("Failed to prepare statement", zap.Error(err))
        return NewDBError("statement_prep", "Database error occurred", err)
    }
    defer stmt.Close()
    
    // Begin transaction for consistency
    tx, err := DB.BeginTx(ctx, nil)
    if err != nil {
        logger.Error("Failed to start transaction", zap.Error(err))
        return NewDBError("tx_begin", "Database error occurred", err)
    }
    
    // Use transaction with prepared statement
    rows, err := tx.StmtContext(ctx, stmt).QueryContext(ctx, id)
    if err != nil {
        tx.Rollback()
        logger.Error("Database query error", zap.Error(err), zap.Int("user_id", id))
        return NewDBError("query_exec", "Database error occurred", err)
    }
    defer rows.Close()
    
    found := false
    for rows.Next() {
        err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
        if err != nil {
            tx.Rollback()
            logger.Error("Row scan error", zap.Error(err))
            return NewDBError("data_scan", "Error processing data", err)
        }
        found = true
    }
    
    // Check for errors during row iteration
    if err = rows.Err(); err != nil {
        tx.Rollback()
        logger.Error("Row iteration error", zap.Error(err))
        return NewDBError("row_iter", "Error processing result set", err)
    }
    
    if !found {
        tx.Rollback()
        return NewDBError("not_found", "No profile found", nil)
    }
    
    // Commit transaction
    if err = tx.Commit(); err != nil {
        logger.Error("Transaction commit error", zap.Error(err))
        return NewDBError("tx_commit", "Database error occurred", err)
    }
    
    return nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
