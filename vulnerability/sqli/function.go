package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{

	/* this funciton use to get data Profile from database with vulnerable query */

	// Input validation as first defense layer
	if !isValidUID(uid) {
		log.Printf("Invalid user ID format attempted: %v", sanitizeLog(uid))
		return fmt.Errorf("invalid user ID format")
	}

	// Using parameterized query with context and timeout to prevent SQL injection
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Using prepared statement with explicit type binding
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
								FROM Profile as p, Users as u 
								WHERE p.user_id = u.id 
								AND u.id = ?`
	
	stmt, err := DB.Prepare(getProfileSql)
	if err != nil {
		log.Printf("Prepare statement error: %v", err)
		return fmt.Errorf("server error")
	}
	defer stmt.Close()
	
	// Execute query with named parameter and context for timeout
	rows, err := stmt.QueryContext(ctx, sql.Named("userID", uid))
	if err != nil {
		// Implementing proper error handling to avoid leaking sensitive information
		log.Printf("Database query error: %v", err)
		return fmt.Errorf("failed to retrieve profile information") // Generic error message for client
	}
	defer rows.Close()
	//var profile = Profilenull

	// Alternative implementation using stored procedure could be:
	// Uncomment if stored procedures are implemented in your database
	// rows, err := DB.ExecContext(ctx, "CALL GetUserProfile(?)", uid)

	for rows.Next(){
		err = rows.Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return err
		}
	}
	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
