package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{

	/* this function uses parameterized queries and prepared statements to prevent SQL injection */
	
	// Enhanced input validation with length limits
	if !isValidUID(uid) {
		return errors.New("invalid user ID format")
	}

	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p,Users as u 
					where p.user_id = u.id 
					and u.id=?`
					
	// Added prepared statement implementation for additional security
	stmt, err := DB.Prepare(getProfileSql)
	if err != nil {
		log.Printf("Statement preparation error: %s", err.Error())
		return errors.New("system error occurred")
	}
	defer stmt.Close()
	
	// Added context with timeout to prevent long-running queries
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	// Using context-aware query with prepared statement
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil{
		log.Printf("Database query error: %s", err.Error())
		return errors.New("failed to retrieve user data")
	}
	defer rows.Close()
	
	found := false
	for rows.Next(){
		found = true
		err = rows.Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return errors.New("error processing user data")
		}
	}
	
	if !found {
		return errors.New("no user found")
	}
	
	return nil
}

// Enhanced validation function with length checks
func isValidUID(uid string) bool {
	// Check reasonable length limits
	if len(uid) == 0 || len(uid) > 10 {
		return false
	}
	// Validate it's numeric
	_, err := strconv.ParseInt(uid, 10, 64)
	return err == nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
