package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func (p *Profile) UnsafeQueryGetData(uid string) error {
	// This function now uses context, named parameters, and improved error handling
	// to prevent SQL injection and improve overall security
	
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Validate input using comprehensive validation layer
	validID, err := ValidateUID(uid)
	if err != nil {
		log.Printf("Input validation failed: %s", err.Error())
		return errors.New("invalid input parameter")
	}
	
	// Using named parameters with sqlx instead of positional placeholders
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p, Users as u 
					WHERE p.user_id = u.id 
					AND u.id=:user_id`
	
	// Create a map for named parameters
	params := map[string]interfacenull{
		"user_id": validID,
	}
	
	// Use a prepared statement with named parameters
	stmt, err := DBX.PrepareNamedContext(ctx, getProfileSql)
	if err != nil {
		log.Printf("Prepare statement error: %s", err.Error())
		return errors.New("database configuration error")
	}
	defer stmt.Close()
	
	rows, err := stmt.QueryxContext(ctx, params)
	if err != nil {
		// Don't return detailed error messages to client
		log.Printf("Query error: %s", err.Error())
		return errors.New("database error occurred")
	}
	defer rows.Close()
	
	found := false
	for rows.Next() {
		found = true
		// Use struct scanning for cleaner code
		err = rows.StructScan(p)
		if err != nil {
			log.Printf("Row scan error: %s", err.Error())
			return errors.New("error processing data")
		}
	}
	
	if !found {
		return errors.New("no profile found")
	}
	
	return nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
