package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(ctx context.Context, uid string)error{
	/* this function uses parameterized queries with multiple security enhancements to prevent SQL injection */

	// Input validation to ensure uid contains only digits
	if !regexp.MustCompile(`^\d+$`).MatchString(uid) {
		return fmt.Errorf("invalid user ID format")
	}
	
	// Added: Comprehensive validation - convert to integer and check range
	userID, err := strconv.Atoi(uid)
	if err != nil || userID <= 0 {
		return fmt.Errorf("invalid user ID")
	}

	// Added: Security logging for query attempts
	log.Printf("Database query initiated for user ID: %s", uid)
	
	// Using parameterized query with placeholders
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p,Users as u 
					where p.user_id = u.id 
					and u.id=?`
	
	// Added: Use transaction management for consistency
	tx, err := DB.BeginTx(ctx, nil)
	if err != nil {
		log.Printf("Failed to begin transaction: %v", err)
		return err
	}
	defer tx.Rollback() // Will rollback if not committed
	
	// Added: Use prepared statements for better security and performance
	stmt, err := tx.PrepareContext(ctx, getProfileSql)
	if err != nil {
		log.Printf("Failed to prepare statement: %v", err)
		return err
	}
	defer stmt.Close()
	
	// Added: Use context-based queries for timeout control
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil {
		log.Printf("Query execution error: %v", err)
		return err
	}
	defer rows.Close()
	
	found := false
	for rows.Next(){
		found = true
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return err
		}
	}
	
	if err = rows.Err(); err != nil {
		log.Printf("Error iterating rows: %v", err)
		return err
	}
	
	// Added: Commit transaction on successful query
	if err = tx.Commit(); err != nil {
		log.Printf("Failed to commit transaction: %v", err)
		return err
	}
	
	// Added: Security logging for completed query
	log.Printf("Database query completed successfully for user ID: %s", uid)
	
	if !found {
		return fmt.Errorf("no profile found for user ID: %s", uid)
	}
	
	return nil
}


func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
