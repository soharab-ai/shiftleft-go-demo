package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{
	// Input validation to ensure uid contains only digits and meets security requirements
	// Strengthened input validation to prevent SQL injection and other attacks
	if !isValidUID(uid) {
		return fmt.Errorf("invalid user ID format")
	}

	// Using parameterized query instead of string interpolation
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p, Users as u 
					WHERE p.user_id = u.id 
					AND u.id=?`

	// Create a prepared statement once for reuse - enhancement #1
	stmt, err := DB.Prepare(getProfileSql)
	if err != nil {
		log.Printf("Prepare error: %s", err.Error())
		return fmt.Errorf("database error occurred")
	}
	defer stmt.Close()

	// Adding context with timeout to prevent DoS via long-running queries - enhancement #2
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	// Execute the prepared statement with parameters using context
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil{
		log.Printf("Query error: %s", err.Error())
		return fmt.Errorf("database error occurred")
	}
	defer rows.Close()
	
	found := false
	// Implementing result size limiting - enhancement #5
	const MAX_ROWS = 1000
	rowCount := 0
	
	for rows.Next(){
		// Protect against potential memory exhaustion
		if rowCount >= MAX_ROWS {
			return fmt.Errorf("too many results")
		}
		
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s", err.Error())
			return fmt.Errorf("error processing data")
		}
		found = true
		rowCount++
	}
	
	if !found {
		return fmt.Errorf("no data found")
	}
	
	return nil
}

// Helper function to validate user ID input with enhanced validation
func isValidUID(uid string) bool {
	// Added length validation to prevent buffer overflow attacks - enhancement #3
	if len(uid) > 20 || len(uid) == 0 {
		return false
	}
	// Only allow digits in the user ID
	match, _ := regexp.MatchString("^[0-9]+$", uid)
	return match && uid != ""  // Ensure non-empty input
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
