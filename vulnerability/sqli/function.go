package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{
	/* this function gets data Profile from database with enhanced security */
	
	// Add context with timeout to prevent long-running queries
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	// Enhanced input validation beyond basic type checking
	if !isValidUserID(uid) {
		log.Printf("Invalid user ID format or range: %s", uid)
		return errors.New("invalid user ID format or range")
	}
	
	// Define allowed query pattern (query whitelisting)
	allowedQueryPattern := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p,Users as u 
					where p.user_id = u.id 
					and u.id=?`
	
	// Using prepared statement instead of direct query parameterization
	stmt, err := DB.PrepareContext(ctx, allowedQueryPattern)
	if err != nil {
		// Log the detailed error but return a generic message
		log.Printf("Statement preparation error: %s", err.Error())
		return errors.New("database configuration error")
	}
	defer stmt.Close()
	
	// Execute the prepared statement with the parameter
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil {
		log.Printf("Database query error: %s", err.Error())
		return errors.New("database error occurred")
	}
	defer rows.Close()
	
	// Track if any rows were found
	rowFound := false
	
	for rows.Next() {
		rowFound = true
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil {
			log.Printf("Row scan error: %s", err.Error())
			return errors.New("error processing data")
		}
	}
	
	// Check for errors from iterating over rows
	if err = rows.Err(); err != nil {
		log.Printf("Row iteration error: %s", err.Error())
		return errors.New("error retrieving data")
	}
	
	if !rowFound {
		return errors.New("no profile data found")
	}
	
	return nil
}

// Helper function to validate user ID with comprehensive checks
func isValidUserID(uid string) bool {
	// Check if it's a valid integer
	id, err := strconv.Atoi(uid)
	if err != nil {
		return false
	}
	
	// Validate ID is within acceptable range (e.g., positive and reasonable maximum)
	if id <= 0 || id > 1000000 {
		return false
	}
	
	// Check for potentially malicious patterns
	maliciousPattern := regexp.MustCompile(`[;'"\\\-]`)
	if maliciousPattern.MatchString(uid) {
		return false
	}
	
	return true
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
