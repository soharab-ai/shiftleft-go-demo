package sqli

import(
	"log"
	"fmt"
	"database/sql"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util/database"
)

var DB *sql.DB
var err error

func init(){
	DB, err = database.Connect()
	if err != nil{
		log.Println(err.Error())
	}
}

type Profile struct{
	Uid int
	Name string
	City string
	PhoneNumber string
}

func NewProfile()*Profile{
	return &Profile{}
}

func(p *Profile)UnsafeQueryGetData(uid string)error{

	/* this function use to get data Profile from database with secured query */
	
	// Added more robust input validation with regex patterns instead of just Atoi
	if !regexp.MustCompile(`^[0-9]+$`).MatchString(uid) {
		log.Printf("Invalid user ID format: %v", uid)
		return errors.New("invalid user ID format")
	}
	
	// Use parameterized query instead of string concatenation
	getProfileSql := `SELECT p.user_id, p.full_name, p.city, p.phone_number 
					FROM Profile as p, Users as u 
					WHERE p.user_id = u.id 
					AND u.id=?`
	
	// Added context-aware database operations for proper timeout handling
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	// Implemented prepared statements for better performance and security
	stmt, err := DB.PrepareContext(ctx, getProfileSql)
	if err != nil {
		// Improved logging with more context
		log.Printf("Database prepare error: %s, userID: %s", err.Error(), uid)
		return errors.New("database error occurred")
	}
	defer stmt.Close()
	
	rows, err := stmt.QueryContext(ctx, uid)
	if err != nil{
		// Log the error internally but return a generic error message
		// Structured logging with more context
		log.Printf("Database query error: %s, userID: %s", err.Error(), uid)
		return errors.New("database error occurred")
	}
	defer rows.Close()
	
	found := false
	for rows.Next(){
		found = true
		err = rows.Scan(&p.Uid, &p.Name, &p.City, &p.PhoneNumber)
		if err != nil{
			log.Printf("Row scan error: %s, userID: %s", err.Error(), uid)
			return errors.New("error processing data")
		}
	}
	
	// Check for errors from iterating over rows
	if err = rows.Err(); err != nil {
		log.Printf("Row iteration error: %s, userID: %s", err.Error(), uid)
		return errors.New("error processing data")
	}
	
	if !found {
		return errors.New("no data found")
	}
	
	return nil
}

	return nil
}

func(p *Profile)SafeQueryGetData(uid string) error{

	/* this funciton use to get data Profile from database with prepare statement */

	const (
		getProfileSql = 
		`SELECT p.user_id, p.full_name, p.city, p.phone_number 
		FROM Profile as p,Users as u 
		where p.user_id = u.id 
		and u.id=?`) 
	
	stmt, err := DB.Prepare(getProfileSql) //prepare statement 
	if err != nil{
		return err
	}

	defer stmt.Close()
	err = stmt.QueryRow(uid).Scan(&p.Uid,&p.Name,&p.City,&p.PhoneNumber)
	if err != nil{
		return err
	}
	return nil
}
