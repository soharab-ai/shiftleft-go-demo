package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Create a context with timeout for the entire request
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	
	// Store context in request for downstream use
	r = r.WithContext(ctx)
	
	// Get user ID from cookie with proper validation
	uid := util.GetCookie(r, "Uid")
	
	// Create a profile object
	p := NewProfile()
	
	// Data to send to client
	data := make(map[string]interfacenull)
	
	// Always use the safe implementation with context awareness
	err := p.SafeQueryGetDataWithContext(ctx, uid)
	if err != nil {
		data["error"] = "No Data Found"
		// Use sanitized logging to prevent log forging
		log.Printf("Error retrieving profile data: %s", sanitizeLogEntry(err.Error()))
	}
	
	data["title"] = "Sql Injection"
	data["uid"] = strconv.Itoa(p.Uid)
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	
	util.SafeRender(w, r, "template.sqli1", data)
}

// sanitizeLogEntry prevents log forging by removing potentially dangerous characters
func sanitizeLogEntry(entry string) string {
	// Remove CRLF characters that could be used for log injection
	entry = strings.Replace(entry, "\r", "", -1)
	entry = strings.Replace(entry, "\n", "", -1)
	// Other sanitization as needed
	return entry
}


func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	p := NewProfile()

	data := make(map[string]interface{}) // data to send to client

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			log.Printf("sql error")
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}

	data["title"] = "Sql Injection"
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	util.SafeRender(w, r, "template.sqli2", data)
}
