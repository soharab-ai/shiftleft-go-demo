package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// ErrorHandler middleware provides centralized error handling
func ErrorHandler(next http.HandlerFunc) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        defer func() {
            if rec := recover(); rec != nil {
                // Log the panic with stack trace
                logger.WithFields(logrus.Fields{
                    "panic": rec,
                    "url":   r.URL.String(),
                    "method": r.Method,
                }).Error("Handler panic recovered")
                
                // Return standardized error to user
                w.WriteHeader(http.StatusInternalServerError)
                util.SafeRender(w, r, "template.error", map[string]interfacenull{
                    "error": "An unexpected error occurred",
                })
            }
        }()
        
        // Add request ID to context
        requestID := fmt.Sprintf("req-%d", time.Now().UnixNano())
        ctx := context.WithValue(r.Context(), "requestID", requestID)
        r = r.WithContext(ctx)
        
        next(w, r)
    }
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    // Get request ID from context for logging
    requestID, _ := r.Context().Value("requestID").(string)
    
    // Get user ID from cookie with context-aware logging
    uid := util.GetCookie(r, "Uid")
    logger.WithFields(logrus.Fields{
        "requestID": requestID,
        "endpoint": "sqli1Handler",
        "uidPresent": uid != "",
    }).Info("Request received")
    
    // Input validation - ensure uid is present
    if uid == "" {
        logger.WithField("requestID", requestID).Warn("User ID not found in cookie")
        data := map[string]interfacenull{
            "error": "User ID not found in cookie",
            "title": "SQL Injection",
        }
        util.SafeRender(w, r, "template.sqli1", data)
        return
    }
    
    p := NewProfile()
    data := make(map[string]interfacenull)
    
    // Get profile data with proper error handling
    err := p.UnsafeQueryGetData(uid) // Method name kept for compatibility but it's now safe
    
    if err != nil {
        // Handle typed errors for better responses
        if errResp, ok := err.(*ErrorResponse); ok {
            logger.WithFields(logrus.Fields{
                "requestID": requestID,
                "errorCode": errResp.Code,
                "uid": uid,
            }).Warn("Error retrieving user data")
            
            data["error"] = errResp.Message
        } else {
            // Fallback for untyped errors
            logger.WithFields(logrus.Fields{
                "requestID": requestID,
                "error": err.Error(),
                "uid": uid,
            }).Error("Unhandled error retrieving user data")
            
            data["error"] = "Error processing your request"
        }
        
        util.SafeRender(w, r, "template.sqli1", data)
        return
    }
    
    // Log successful profile retrieval
    logger.WithFields(logrus.Fields{
        "requestID": requestID,
        "uid": uid,
    }).Info("Profile data retrieved successfully")
    
    // Prepare display data
    data["title"] = "SQL Injection"
    data["uid"] = strconv.Itoa(p.Uid)
    data["name"] = p.Name
    data["city"] = p.City
    data["number"] = p.PhoneNumber

    util.SafeRender(w, r, "template.sqli1", data)
}

func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    uid := r.FormValue("uid")
    
    // Input validation layer - validate before processing
    if !isValidUID(uid) {
        data := map[string]interfacenull{
            "error": "Invalid input format",
            "title": "Input Validation Error",
        }
        util.SafeRender(w, r, "template.error", data)
        return
    }

    p := NewProfile()
    data := make(map[string]interfacenull) // Changed to interfacenull for type correctness
    
    // Always use the safe method with multiple security layers
    err := p.UnsafeQueryGetData(uid)
    if err != nil {
        // Log the error without exposing sensitive details to user
        log.Printf("Query error: %s", err.Error())
        
        // Return generic error to client
        data["error"] = "No Data Found"
    }

    data["title"] = "Sql Injection"
    data["name"] = p.Name
    data["city"] = p.City
    data["number"] = p.PhoneNumber
    
    // Extra security: Check for suspicious input patterns even after escaping
    if containsSuspiciousPatterns(uid) {
        logger.LogQuery("SECURITY_ALERT", "Possible injection attempt with input: "+uid)
    }
    
    util.SafeRender(w, r, "template.sqli2", data)
}

// containsSuspiciousPatterns checks for potential SQL injection patterns
func containsSuspiciousPatterns(input string) bool {
    patterns := []string{
        "UNION\\s+SELECT",
        "OR\\s+1=1",
        "--",
        ";",
        "DROP\\s+TABLE",
        "DELETE\\s+FROM",
        "INSERT\\s+INTO",
        "EXEC\\s+xp_",
    }
    
    for _, pattern := range patterns {
        match, _ := regexp.MatchString("(?i)"+pattern, input)
        if match {
            return true
        }
    }
    return false
}

