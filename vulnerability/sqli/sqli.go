package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := util.GetCookie(r, "Uid")

	// Implement Content Security Policy Headers
	w.Header().Set("Content-Security-Policy", "default-src 'self'")

	// Implement rate limiting to prevent brute force SQL injection attempts
	if !ratelimiter.Allow(r.RemoteAddr) {
		data := make(map[string]interfacenull)
		data["error"] = "Too many requests"
		util.SafeRender(w, r, "template.error", data)
		return
	}

	p := NewProfile()
	data := make(map[string]interfacenull)

	// Log suspicious input patterns
	if strings.Contains(uid, "'") || strings.Contains(uid, "\"") || strings.Contains(uid, "--") {
		log.Printf("Potential SQL injection attempt from IP: %s with input: %s", r.RemoteAddr, uid)
	}

	// Using bluemonday library for input sanitization instead of custom validation
	sanitizer := bluemonday.StrictPolicy()
	sanitizedUID := sanitizer.Sanitize(uid)

	// Still perform numeric validation to ensure UID is a valid number
	match, _ := regexp.MatchString("^[0-9]+$", sanitizedUID)
	if !match {
		data["error"] = "Invalid user ID format"
		util.SafeRender(w, r, "template.sqli1", data)
		return
	}

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(sanitizedUID)
		if err != nil {
			// Avoiding exposing detailed error to the client
			data["error"] = "Unable to retrieve profile data"
			log.Printf("Database error: %s", err.Error())
		}
	} else {
		err := p.SafeQueryGetData(sanitizedUID)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}
	
	data["title"] = "Sql Injection"
	data["uid"] = strconv.Itoa(p.Uid)
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber

	util.SafeRender(w, r, "template.sqli1", data)
}


func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	p := NewProfile()

	data := make(map[string]interface{}) // data to send to client

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			log.Printf("sql error")
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}

	data["title"] = "Sql Injection"
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	util.SafeRender(w, r, "template.sqli2", data)
}
