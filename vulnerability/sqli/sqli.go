package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Create context with timeout
	ctx, cancel := context.WithTimeout(r.Context(), 10*time.Second)
	defer cancel()
	
	// Use the context-aware request
	r = r.WithContext(ctx)
	
	uid := util.GetCookie(r, "Uid") // Now using the enhanced GetCookie function that validates input
	
	// Additional validation for empty uid
	if uid == "" {
		util.SafeRender(w, r, "template.error", map[string]interfacenull{
			"error": "Invalid or missing user ID",
		})
		return
	}

	/*
		this prevent idor injection but not lead to sql injection

		s := session.New()
		sid := s.GetSession(r, "id")
		if( sid != uid){
			uid = sid
		} */

	p := NewProfile()

	data := make(map[string]interfacenull) // data to send to client

	// Ensure DB connection pool is configured (should be done once at app initialization but shown here for reference)
	if DB != nil {
		DB.SetMaxOpenConns(25)
		DB.SetMaxIdleConns(25)
		DB.SetConnMaxLifetime(5*time.Minute)
	}

	if !util.CheckLevel(r) { // level == low
		// Start a transaction for consistent read operations
		tx, err := DB.BeginTx(ctx, &sql.TxOptions{ReadOnly: true})
		if err != nil {
			log.Printf("Failed to start transaction: %s", err.Error())
			data["error"] = "Database error"
			util.SafeRender(w, r, "template.error", data)
			return
		}
		
		defer tx.Rollback() // Will be no-op if transaction is committed
		
		// Set transaction in profile object (assuming Profile has a field for transaction)
		// p.SetTransaction(tx)
		
		err = p.UnsafeQueryGetData(uid)
		if err != nil {
			data["error"] = err.Error()
		} else {
			tx.Commit()
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}
	
	data["title"] = "Sql Injection"
	data["uid"] = strconv.Itoa(p.Uid)
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber

	util.SafeRender(w, r, "template.sqli1", data)
}


func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	p := NewProfile()

	data := make(map[string]interface{}) // data to send to client

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			log.Printf("sql error")
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}

	data["title"] = "Sql Injection"
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	util.SafeRender(w, r, "template.sqli2", data)
}
