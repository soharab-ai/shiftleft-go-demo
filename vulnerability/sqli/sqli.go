package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Get logger instance
	logger, _ := zap.NewProduction()
	defer logger.Sync()

	uid := util.GetCookie(r, "Uid") // many developer use this style. set reference key in cookie with no sanitize
	
	/*
		this prevent idor injection but not lead to sql injection
		
		s := session.New()
		sid := s.GetSession(r, "id")
		if( sid != uid){
			uid = sid
		} */
	
	p := NewProfile()
	
	data := make(map[string]interfacenull) // data to send to client
	
	// Enhanced input validation before processing the UID
	if uid == "" {
		logger.Warn("User ID is empty",
			zap.String("event", "missing_uid"),
		)
		data["error"] = "Invalid user ID: cannot be empty"
		util.SafeRender(w, r, "template.sqli1", data)
		return
	}
	
	if !ValidateUID(uid) {
		logger.Warn("Invalid user ID format detected",
			zap.String("attempted_uid", uid),
		)
		data["error"] = "Invalid user ID format"
		util.SafeRender(w, r, "template.sqli1", data)
		return
	}
	
	// Create context with timeout for database operations
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	
	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			logger.Error("Error getting user data",
				zap.String("user_id", uid),
				zap.Error(err),
			)
			data["error"] = "Error retrieving data"
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			logger.Error("Error getting user data safely",
				zap.String("user_id", uid),
				zap.Error(err),
			)
			data["error"] = "No Data Found"
		}
	}
	
	// Use safe string conversion to avoid injection in the UI
	if p.Uid > 0 {
		data["title"] = "Sql Injection"
		data["uid"] = strconv.Itoa(p.Uid)
		data["name"] = p.Name
		data["city"] = p.City
		data["number"] = p.PhoneNumber
	}
	
	util.SafeRender(w, r, "template.sqli1", data)
}


func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	p := NewProfile()

	data := make(map[string]interface{}) // data to send to client

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			log.Printf("sql error")
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}

	data["title"] = "Sql Injection"
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	util.SafeRender(w, r, "template.sqli2", data)
}
