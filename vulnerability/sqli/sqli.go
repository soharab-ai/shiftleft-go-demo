package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := util.GetCookie(r, "Uid") // many developer use this style. set reference key in cookie with no sanitize

	/*
		this prevent idor injection but not lead to sql injection

		s := session.New()
		sid := s.GetSession(r, "id")
		if( sid != uid){
			uid = sid
		} */

	p := NewProfile()

	data := make(map[string]interface{}) // data to send to client

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			data["error"] = err.Error()
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}
	data["title"] = "Sql Injection"
	data["uid"] = strconv.Itoa(p.Uid)
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber

	util.SafeRender(w, r, "template.sqli1", data)
}

func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    uid := r.FormValue("uid")
    
    // Input validation layer - validate before processing
    if !isValidUID(uid) {
        data := map[string]interfacenull{
            "error": "Invalid input format",
            "title": "Input Validation Error",
        }
        util.SafeRender(w, r, "template.error", data)
        return
    }

    p := NewProfile()
    data := make(map[string]interfacenull) // Changed to interfacenull for type correctness
    
    // Always use the safe method with multiple security layers
    err := p.UnsafeQueryGetData(uid)
    if err != nil {
        // Log the error without exposing sensitive details to user
        log.Printf("Query error: %s", err.Error())
        
        // Return generic error to client
        data["error"] = "No Data Found"
    }

    data["title"] = "Sql Injection"
    data["name"] = p.Name
    data["city"] = p.City
    data["number"] = p.PhoneNumber
    
    // Extra security: Check for suspicious input patterns even after escaping
    if containsSuspiciousPatterns(uid) {
        logger.LogQuery("SECURITY_ALERT", "Possible injection attempt with input: "+uid)
    }
    
    util.SafeRender(w, r, "template.sqli2", data)
}

// containsSuspiciousPatterns checks for potential SQL injection patterns
func containsSuspiciousPatterns(input string) bool {
    patterns := []string{
        "UNION\\s+SELECT",
        "OR\\s+1=1",
        "--",
        ";",
        "DROP\\s+TABLE",
        "DELETE\\s+FROM",
        "INSERT\\s+INTO",
        "EXEC\\s+xp_",
    }
    
    for _, pattern := range patterns {
        match, _ := regexp.MatchString("(?i)"+pattern, input)
        if match {
            return true
        }
    }
    return false
}

