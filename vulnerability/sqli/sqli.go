package sqli

import (
	"log"
	"net/http"
	"strconv"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
)

type SQLI struct{}

func New() SQLI {
	return SQLI{}
}

func (SQLI) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/sqli1", mw.CapturePanic(mw.AuthCheck(sqli1Handler))) // not use logger due to sqlmap request
	// r.GET("/sqli2", mw.CapturePanic(mw.DetectSQLMap(mw.AuthCheck(sqli2Handler))))
	r.GET("/sqli1", sqli1Handler) // not use logger due to sqlmap request
	r.GET("/sqli2", sqli2Handler)
}

// Global rate limiter to prevent brute force attempts
var limiter = rate.NewLimiter(rate.Limit(10), 30) // 10 requests per second with burst of 30

// Logger for structured logging
var logger *zap.Logger

func init() {
    // Initialize structured logger
    var err error
    logger, err = zap.NewProduction()
    if err != nil {
        log.Fatalf("Failed to initialize logger: %v", err)
    }
}

// DBError provides comprehensive error categorization
type DBError struct {
    Code    string
    Message string
    Err     error
}

func NewDBError(code, message string, err error) *DBError {
    return &DBError{Code: code, Message: message, Err: err}
}

func (e *DBError) Error() string {
    return e.Message
}

func sqli1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    // Apply rate limiting to prevent brute force attempts
    if !limiter.Allow() {
        http.Error(w, "Rate limit exceeded", http.StatusTooManyRequests)
        logger.Warn("Rate limit exceeded", zap.String("ip", r.RemoteAddr))
        return
    }
    
    uid := util.GetCookie(r, "Uid")
    
    // Comprehensive input validation with context
    requestID := r.Header.Get("X-Request-ID")
    logger.Info("Processing request", zap.String("request_id", requestID), zap.String("uid", uid))
    
    // Enhanced validation
    if _, err := strconv.Atoi(uid); err != nil {
        logger.Warn("Invalid user ID format", 
            zap.String("request_id", requestID),
            zap.String("uid", uid),
            zap.String("ip", r.RemoteAddr))
            
        data := map[string]interfacenull{
            "error": "Invalid user ID format",
            "title": "Sql Injection",
        }
        util.SafeRender(w, r, "template.sqli1", data)
        return
    }

    p := NewProfile()
    data := make(map[string]interfacenull)

    // Create context with timeout for the operation
    ctx, cancel := context.WithTimeout(r.Context(), 3*time.Second)
    defer cancel()
    
    // Replace request with context-aware request
    r = r.WithContext(ctx)

    // Always use the safe query method with proper error handling
    err := p.SafeQueryGetData(uid)
    if err != nil {
        // Categorize errors based on type for proper handling
        var dbErr *DBError
        if errors.As(err, &dbErr) {
            logger.Error("Database error", 
                zap.String("request_id", requestID),
                zap.String("error_code", dbErr.Code),
                zap.Error(dbErr.Err))
                
            // Return generic error message based on error category
            switch dbErr.Code {
            case "not_found":
                data["error"] = "No profile found"
            case "invalid_input":
                data["error"] = "Invalid input provided"
            default:
                data["error"] = "An error occurred while processing your request"
            }
        } else {
            logger.Error("Unexpected error", zap.String("request_id", requestID), zap.Error(err))
            data["error"] = "An unexpected error occurred"
        }
    } else {
        // Log successful query
        logger.Info("Successfully retrieved profile", 
            zap.String("request_id", requestID),
            zap.Int("uid", p.Uid))
    }
    
    data["title"] = "Sql Injection"
    data["uid"] = strconv.Itoa(p.Uid)
    data["name"] = p.Name
    data["city"] = p.City
    data["number"] = p.PhoneNumber

    util.SafeRender(w, r, "template.sqli1", data)
}


func sqli2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	p := NewProfile()

	data := make(map[string]interface{}) // data to send to client

	if !util.CheckLevel(r) { // level == low
		err := p.UnsafeQueryGetData(uid)
		if err != nil {
			log.Printf("sql error")
		}
	} else {
		err := p.SafeQueryGetData(uid)
		if err != nil {
			data["error"] = "No Data Found"
			log.Printf("prepare error : %s", err.Error())
		}
	}

	data["title"] = "Sql Injection"
	data["name"] = p.Name
	data["city"] = p.City
	data["number"] = p.PhoneNumber
	util.SafeRender(w, r, "template.sqli2", data)
}
