package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {
		term := r.FormValue("term")

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(notFound) // vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	// Added input validation before processing
	if !validateUID(uid) {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	// Improved error handling with context
	if err != nil {
		log.Printf("Error retrieving user profile: %v", err)
		http.Error(w, "An error occurred while processing your request", http.StatusInternalServerError)
		return
	}

	data := make(map[string]interfacenull)
	
	// Fixed vulnerability: Instead of directly embedding user input in script tags,
	// create a structured data object and JSON encode it
	profileData := map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	}

	// Convert the data to JSON for safe client-side usage
	jsonData, err := json.Marshal(profileData)
	if err != nil {
		log.Printf("Error marshaling profile data: %v", err)
		http.Error(w, "An error occurred while processing your request", http.StatusInternalServerError)
		return
	}
	
	// Using data attributes approach for safer client-side handling
	data["profileDataAttr"] = template.HTMLAttr(`data-profile="` + template.JSEscapeString(string(jsonData)) + `"`)
	data["title"] = "Cross Site Scripting"
	
	// Setting CSP headers before rendering the template
	setCSPHeaders(w)
	
	util.SafeRender(w, r, "template.xss2", data)
}

// New function to validate UID input
func validateUID(uid string) bool {
	// Implement validation logic - only allow alphanumeric UIDs
	match, _ := regexp.MatchString("^[a-zA-Z0-9]+$", uid)
	return match
}

// New function to set Content Security Policy headers
func setCSPHeaders(w http.ResponseWriter) {
	// Implementing strong CSP headers to prevent XSS attacks
	w.Header().Set("Content-Security-Policy", 
		"default-src 'self'; script-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'")
	
	// Additional security headers
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("X-Frame-Options", "DENY")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
