package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// SecurityService provides centralized security functions
type SecurityService struct {
	sanitizer *bluemonday.Policy
	templates *template.Template
}

// NewSecurityService creates a new instance of the security service
func NewSecurityService() *SecurityService {
	// Initialize templates with security features
	tmpl := template.New("").Funcs(template.FuncMap{
		"html":     template.HTMLEscapeString,
		"js":       template.JSEscapeString,
		"urlquery": template.URLQueryEscaper,
	})
	
	// Parse all templates
	tmpl = template.Must(tmpl.ParseGlob("templates/*.html"))
	
	return &SecurityService{
		sanitizer: bluemonday.UGCPolicy(),
		templates: tmpl,
	}
}

// Global security service
var securitySvc = NewSecurityService()

// InputValidator validates input based on type constraints
func (s *SecurityService) InputValidator(input string, maxLength int, allowedPattern string) (string, error) {
	// Check length constraints
	if len(input) > maxLength {
		return "", fmt.Errorf("input exceeds maximum length of %d characters", maxLength)
	}
	
	// Check pattern if provided
	if allowedPattern != "" {
		matched, err := regexp.MatchString(allowedPattern, input)
		if err != nil {
			return "", fmt.Errorf("pattern matching error: %v", err)
		}
		if !matched {
			return "", fmt.Errorf("input contains disallowed characters")
		}
	}
	
	return input, nil
}

// SanitizeHTML provides context-aware HTML sanitization
func (s *SecurityService) SanitizeHTML(input string) string {
	return s.sanitizer.Sanitize(input)
}

// RenderTemplate safely renders templates with CSP
func (s *SecurityService) RenderTemplate(w http.ResponseWriter, templateName string, data map[string]interfacenull) error {
	// Generate CSP nonce
	nonce := generateNonce()
	
	// Add nonce to template data
	data["cspNonce"] = nonce
	
	// Set strong CSP header with nonce
	w.Header().Set("Content-Security-Policy", 
		fmt.Sprintf("default-src 'self'; script-src 'self' 'nonce-%s'; object-src 'none'; "+
			"frame-ancestors 'none'; report-uri /csp-report", nonce))
	
	// Set additional security headers
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("X-Frame-Options", "DENY")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	
	return s.templates.ExecuteTemplate(w, templateName, data)
}

// generateNonce creates a random nonce for CSP
func generateNonce() string {
	nonceBytes := make([]byte, 16)
// This function is no longer needed as we're using the SecurityService
// Keeping it for backward compatibility but redirecting to SecurityService
func sanitizeUserInput(input string) string {
	return securitySvc.SanitizeHTML(input)
}

func XSSMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Set security headers for all responses
		w.Header().Set("X-XSS-Protection", "1; mode=block")
		w.Header().Set("X-Content-Type-Options", "nosniff")
		next.ServeHTTP(w, r)
	})
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	data := make(map[string]interfacenull)

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Step 1: Input validation
		validTerm, err := securitySvc.InputValidator(term, 100, "^[a-zA-Z0-9 ._-]*$")
		if err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		
		// Apply business logic
		if validTerm == "sql injection" {
			validTerm = "sqli"
		}

		// Step 2: Context-aware sanitization
		sanitizedTerm := securitySvc.SanitizeHTML(validTerm)
		
		// Get vulnerability details
		vulnDetails := GetExp(sanitizedTerm)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use raw strings - template engine will handle escaping
			data["value"] = sanitizedTerm
			data["term"] = fmt.Sprintf("%s not found", sanitizedTerm)
		} else {
			// Use raw strings - template engine will handle escaping
			data["value"] = sanitizedTerm
			data["term"] = sanitizedTerm
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	
	// Step 3: Render with security service
	err := securitySvc.RenderTemplate(w, "template.xss1.html", data)
	if err != nil {
		http.Error(w, "Template rendering error", http.StatusInternalServerError)
	}
}

// CSPReportHandler handles CSP violation reports
func CSPReportHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Log CSP violations
	// Implementation would log the violation details
	w.WriteHeader(http.StatusNoContent)
}

// SetupRoutes configures all routes with security middleware
func SetupRoutes(router *httprouter.Router) {
	// Apply XSS middleware to all routes
	securedRouter := XSSMiddleware(router)
	
	// Register routes
	router.GET("/xss1", xss1Handler)
	router.POST("/csp-report", CSPReportHandler)
	
	// More route registrations...
}


		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = value
			// Store as regular string, not template.HTML
			data["term"] = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", termEncoded)
			data["value"] = value
			data["term"] = vuln
			data["details"] = vulnDetails
		}

		// Implement stronger Content Security Policy
		w.Header().Set("Content-Security-Policy", 
			"default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; "+
			"style-src 'self'; font-src 'self'; frame-ancestors 'none'; form-action 'self'; base-uri 'self'")
	}
	
	data["title"] = "Cross Site Scripting"
	// Use the safe template rendering approach
	renderSafeTemplate(w, "template.xss1", data)
}


        // Store raw text without any HTML markup
        templateData.TermText = term
        templateData.Value = term
        templateData.IsSearching = term != ""
        
        if term == "" {
            // Nothing to do, default state
        } else {
            vulnDetails := GetExp(term)
            if vulnDetails == "" {
                // Not found case - only pass data, no HTML
                templateData.Found = false
            } else {
                // Found case - only pass data, no HTML
                templateData.Found = true
                templateData.Details = vulnDetails
            }
        }
    }
    
    // Setup template functions for context-aware encoding
    funcMap := template.FuncMap{
        "attributeEscape": html.EscapeString,
        "urlPathEscape": url.PathEscape,
    }
    
    // Use SafeRenderWithFuncs (assuming this is a modified version of SafeRender that accepts FuncMap)
    // If SafeRenderWithFuncs doesn't exist, you would need to implement it or modify SafeRender
    util.SafeRenderWithFuncs(w, r, "template.xss1", templateData, funcMap)
}

		} else if vulnDetails == "" {
			// Term provided but not found
			data.Term = term
			data.Found = false
		} else {
			// Term found with details
			data.Term = term
			data.Details = vulnDetails
			data.Found = true
		}
	}
	
	// Use SafeRender which properly handles template rendering
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Add security headers to prevent XSS attacks even if escaping fails
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self'; object-src 'none'")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	
	uid := r.FormValue("uid")

	// Validate uid is numeric as expected
	if _, err := strconv.Atoi(uid); err != nil {
		http.Error(w, "Invalid input: uid must be numeric", http.StatusBadRequest)
		return
	}

	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
		http.Error(w, "Error retrieving profile", http.StatusInternalServerError)
		return
	}

	// Create a safe data structure to be passed to templates
	data := make(map[string]interfacenull)
	data["title"] = "Cross Site Scripting"

	// Create a JSON safe object to pass data to JavaScript
	jsData := map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	}
	
	// JSON marshal ensures proper JavaScript escaping
	jsonData, err := json.Marshal(jsData)
	if err != nil {
		http.Error(w, "Error processing data", http.StatusInternalServerError)
		return
	}
	
	// Use template.JSEscapeString for additional context-specific escaping
	// This provides an additional layer of protection beyond JSON.Marshal
	data["jsonData"] = template.JSEscapeString(string(jsonData))
	
	// Include a flag to tell the template to load DOMPurify for client-side sanitization
	data["useDOMPurify"] = true
	
	// Add CSRF token for form submission protection
	data["csrfToken"] = util.GenerateCSRFToken(r)
	
	// Use util.SafeRender which ensures proper template context escaping
	util.SafeRender(w, r, "template.xss2", data)
	
	/* Note: The HTML template should be updated to:
	<!DOCTYPE html>
	<html>
	<head>
		<title>{{.title}}</title>
		{{if .useDOMPurify}}
		<!-- Load DOMPurify from a trusted CDN -->
		<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js" 
				integrity="sha512-M0yKQ7vrZAqc2mE9U7SuJ/CX8H9unMqoX/FbYLBEnbO/CO+q5+Cbot8jZGDgKHLcpEaso4jm9Y7ND9UhmDcGww==" 
				crossorigin="anonymous" referrerpolicy="no-referrer"></script>
		{{end}}
	</head>
	<body>
		<div id="user-profile">
			<!-- Content will be populated by JavaScript -->
			<div id="user-name"></div>
			<div id="user-city"></div>
			<div id="user-phone"></div>
		</div>
		
		<script>
		// Parse the JSON with an extra layer of escaping protection
		const profileDataStr = {{.jsonData}};
		// Parse the escaped JSON string
		const profileData = JSON.parse(profileDataStr);
		
		// Sanitize data client-side before DOM manipulation
		document.getElementById('user-name').textContent = DOMPurify.sanitize(profileData.name);
		document.getElementById('user-city').textContent = DOMPurify.sanitize(profileData.city);
		document.getElementById('user-phone').textContent = DOMPurify.sanitize(profileData.phoneNumber);
		// Never use innerHTML with user data
		</script>
	</body>
	</html>
	*/
}


	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(input string) string {
    // Replace with proper sanitization using bluemonday
    policy := bluemonday.UGCPolicy()
    return policy.Sanitize(input)
}


