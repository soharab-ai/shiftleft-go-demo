package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Generate a random nonce for CSP
	nonceBytes := make([]byte, 16)
	_, err := rand.Read(nonceBytes)
	if err != nil {
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}
	nonce := base64.StdEncoding.EncodeToString(nonceBytes)
	
	// Implement stricter CSP with nonce and additional security headers
	w.Header().Set("Content-Security-Policy", fmt.Sprintf("default-src 'none'; script-src 'nonce-%s' 'strict-dynamic'; connect-src 'self'; img-src 'self'; style-src 'self';", nonce))
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("Referrer-Policy", "no-referrer-when-downgrade")
	
	data := make(map[string]interfacenull)
	data["nonce"] = nonce // Add nonce for frontend use

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation: implement length restriction to prevent DoS
		if len(term) > 200 {
			term = term[:200]
		}
		
		// Whitelist-based input validation before sanitization
		safeInputPattern := regexp.MustCompile(`^[a-zA-Z0-9\s\.,\-_]+$`)
		if !safeInputPattern.MatchString(term) {
			// If input contains unsafe characters, strip them
			term = safeInputPattern.FindString(term)
		}

		// Create a highly restrictive custom sanitization policy
		policy := bluemonday.NewPolicy()
		// Only allow specific elements and attributes needed for functionality
		policy.AllowElements("b", "i", "em", "strong", "span")
		policy.AllowStyles("color", "font-weight").OnElements("span", "b", "i", "em", "strong")
		
		// Context-specific encoding for HTML content
		sanitizedTerm := policy.Sanitize(term)
		// Additional HTML encoding for defense in depth
		htmlEncodedTerm := template.HTMLEscapeString(sanitizedTerm)

		if term == "sql injection" {
			htmlEncodedTerm = "sqli"
		}

		vulnDetails := GetExp(htmlEncodedTerm)

		if htmlEncodedTerm == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use safe string formatting, avoiding template.HTML
			notFound := fmt.Sprintf("<b><i>%s</i></b> not found", htmlEncodedTerm)
			value := htmlEncodedTerm
			
			// Store safely encoded strings for the template
			data["value"] = value
			data["term"] = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", htmlEncodedTerm)
			data["value"] = htmlEncodedTerm
			data["term"] = vuln
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	
	// Add SRI attributes info for template use
	data["sriChecksum"] = "sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"
	
	// Use custom template renderer with context-specific escaping
	util.SafeRender(w, r, "template.xss1", data)
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Length restriction for DoS prevention
	if len(text) > 1000 {
		text = text[:1000]
	}
	
	// Create a highly restrictive custom policy instead of UGCPolicy
	policy := bluemonday.NewPolicy()
	
	// Allow only specific safe elements and attributes
	policy.AllowElements("b", "i", "em", "strong", "span", "p", "br", "ul", "li")
	policy.AllowStyles("color", "font-weight", "text-decoration").OnElements("span", "b", "i", "em", "strong", "p")
	
	// Apply context-specific encoding
	sanitized := policy.Sanitize(text)
	
	// Additional encoding for JavaScript context if needed
	jsEncoded := template.JSEscapeString(sanitized)
	
	// For HTML attributes context
	attrEncoded := strings.Replace(jsEncoded, "'", "&#39;", -1)
	attrEncoded = strings.Replace(attrEncoded, "\"", "&quot;", -1)
	
	return attrEncoded
}

