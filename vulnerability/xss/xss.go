package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {
		term := r.FormValue("term")

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(notFound) // vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	// Validate uid is numeric before use
	if !regexp.MustCompile(`^[0-9]+$`).MatchString(uid) {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	// Apply HTML escaping regardless of security level for consistency
	uid = template.HTMLEscapeString(uid)

	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println("Error retrieving profile data:", err.Error())
		http.Error(w, "Error processing request", http.StatusInternalServerError)
		return
	}

	// Create a sanitizer using bluemonday library for input sanitization
	sanitizer := bluemonday.UGCPolicy()
	
	// Use strongly typed struct instead of generic map for template data
	type TemplateData struct {
		Title        string
		UID          string
		ProfileName  string
		ProfileCity  string
		ProfilePhone string
	}
	
	// Sanitize and prepare data with proper context-specific encoding
	data := TemplateData{
		Title:        "Cross Site Scripting",
		UID:          template.JSEscapeString(uid),
		ProfileName:  template.JSEscapeString(sanitizer.Sanitize(p.Name)),
		ProfileCity:  template.JSEscapeString(sanitizer.Sanitize(p.City)),
		ProfilePhone: template.JSEscapeString(sanitizer.Sanitize(p.PhoneNumber)),
	}

	// Create template function map with context-aware escaping functions
	funcMap := template.FuncMap{
		"safeJS":   template.JSEscapeString,
		"safeAttr": template.HTMLEscapeString,
		"safeURL":  template.URLQueryEscaper,
	}

	// Set comprehensive Content-Security-Policy header
	w.Header().Set("Content-Security-Policy", 
		"default-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'")
	
	// Set additional security headers for defense-in-depth
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")

	// Apply function map to template before rendering
	tmpl, err := template.New("template.xss2").Funcs(funcMap).ParseFiles("templates/template.xss2.html")
	if err != nil {
		log.Println("Error parsing template:", err.Error())
		http.Error(w, "Error processing request", http.StatusInternalServerError)
		return
	}
	
	err = tmpl.Execute(w, data)
	if err != nil {
		log.Println("Error executing template:", err.Error())
		http.Error(w, "Error processing request", http.StatusInternalServerError)
		return
	}
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
