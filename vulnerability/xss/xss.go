package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// Application-wide sanitization policy
var sanitizationPolicy *bluemonday.Policy

func init() {
    // Create a single application-wide sanitization policy
    sanitizationPolicy = bluemonday.UGCPolicy()
    // Allow some basic styling tags but ensure they're safe
    sanitizationPolicy.AllowElements("b", "i", "em", "strong")
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    data := make(map[string]interfacenull)

    if r.Method == "GET" {
        term := r.FormValue("term")
        
        // Input validation before sanitization
        if len(term) > 100 {
            term = term[:100] // Limit input size
        }

        // Sanitize input using proper HTML sanitization
        sanitizedTerm := sanitizeUserInput(term)
        
        // Store only plain data - no HTML formatting in the handler
        data["value"] = sanitizedTerm
        
        if term != "" {
            vulnDetails := GetExp(sanitizedTerm)
            
            if vulnDetails == "" {
                // Store just the information that the term was not found
                data["found"] = false
            } else {
                // Store plain data, let template handle formatting
                data["found"] = true
                data["details"] = vulnDetails
            }
        }
        
        // Store original sanitized term for display
        data["term"] = sanitizedTerm
    }

    data["title"] = "Cross Site Scripting"
    
    // Set comprehensive security headers
    setSecurityHeaders(w)
    
    // Explicitly set Content-Type with charset
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    
    // Use template system to render response with proper escaping
    util.SafeRender(w, r, "template.xss1", data)
}

// Add function to set comprehensive security headers
func setSecurityHeaders(w http.ResponseWriter) {
    // Comprehensive Content-Security-Policy
    w.Header().Set("Content-Security-Policy", 
        "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; connect-src 'self'; frame-ancestors 'none'")
    
    // Enable browser's XSS filter
    w.Header().Set("X-XSS-Protection", "1; mode=block")
    
    // Prevent MIME sniffing
    w.Header().Set("X-Content-Type-Options", "nosniff")
    
    // Additional security header to control frame embedding
    w.Header().Set("X-Frame-Options", "DENY")
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
// sanitizeUserInput provides proper input sanitization
func sanitizeUserInput(input string) string {
    // Basic input validation
    if input == "" {
        return ""
    }
    
    // Remove unwanted characters before sanitization
    input = strings.ReplaceAll(input, "\x00", "") // Remove null bytes
    
    // Use application-wide sanitization policy for consistency
    return sanitizationPolicy.Sanitize(input)
}

// HTMLEscapeString uses template package for proper HTML escaping
func HTMLEscapeString(input string) string {
    // Use Go's built-in HTML escaping
    return template.HTMLEscapeString(input)
}

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
