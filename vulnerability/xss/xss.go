package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Add security headers as per mitigation notes
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	
	data := make(map[string]interfacenull)

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Implement strict input validation before sanitization
		validatedTerm, err := validateInput(term)
		if err != nil {
			http.Error(w, "Invalid input: "+err.Error(), http.StatusBadRequest)
			return
		}
		term = validatedTerm
		
		if util.CheckLevel(r) { // level = high
			term = template.HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		// Use custom restricted policy instead of UGCPolicy
		term = sanitizeUserInput(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("%s not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Let Go's templating engine handle escaping properly
			data["value"] = value
			data["term"] = notFound
		} else {
			data["value"] = value
			data["term"] = term
			data["details"] = vulnDetails
		}
	}
	data["title"] = "Cross Site Scripting"
	
	// Use Go's html/template for automatic escaping
	tmpl, err := template.ParseFiles("templates/xss1.gohtml")
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		return
	}
	
	// Execute template with proper auto-escaping
	err = tmpl.Execute(w, data)
	if err != nil {
		http.Error(w, "Template rendering error", http.StatusInternalServerError)
		return
	}
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})
// Implement custom restrictive policy as recommended in mitigation notes
func sanitizeUserInput(input string) string {
	policy := createRestrictivePolicy()
	return policy.Sanitize(input)
}

// Strict input validation as recommended in mitigation notes
func validateInput(input string) (string, error) {
    if len(input) > 100 {
        return "", errors.New("input too long")
    }
    if regexp.MustCompile(`[<>]`).MatchString(input) {
        return "", errors.New("potentially malicious characters detected")
    }
    return input, nil
}
// Create a more restrictive Bluemonday policy as recommended in mitigation notes
func createRestrictivePolicy() *bluemonday.Policy {
    policy := bluemonday.NewPolicy()
    // Only allow specific safe tags
    policy.AllowElements("b", "i", "br")
    // No attributes allowed
    return policy
}

}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
