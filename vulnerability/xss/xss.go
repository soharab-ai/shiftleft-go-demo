package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {
		term := r.FormValue("term")

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(notFound) // vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	// Validate uid format - ensure it contains only numeric values
	if !regexp.MustCompile(`^[0-9]+$`).MatchString(uid) {
		log.Printf("Invalid user ID format attempted: %s", html.EscapeString(uid))
		http.Error(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}

	// Use standard library's html.EscapeString instead of custom function
	if util.CheckLevel(r) { // level = high
		uid = html.EscapeString(uid)
	}

	p := sqli.NewProfile()
	// Improved error handling with context
	if err := p.SafeQueryGetData(uid); err != nil {
		log.Printf("Database query failed for UID %s: %v", uid, err)
		http.Error(w, "Failed to retrieve user data", http.StatusInternalServerError)
		return
	}

	// Generate a random nonce for CSP
	nonceBytes := make([]byte, 16)
	if _, err := rand.Read(nonceBytes); err != nil {
		log.Printf("Failed to generate CSP nonce: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}
	nonce := base64.StdEncoding.EncodeToString(nonceBytes)

	// Set security headers for defense-in-depth approach
	w.Header().Set("Content-Security-Policy", 
		fmt.Sprintf("default-src 'self'; script-src 'self' 'nonce-%s'", nonce))
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")

	// Create structured data to be safely encoded in the template
	data := make(map[string]interfacenull)
	data["title"] = "Cross Site Scripting"
	data["nonce"] = nonce  // Pass the nonce to the template
	
	// Create a proper data structure for the profile data
	profileData := map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	}
	
	// JSON encode the profile data to safely use in JavaScript context
	profileJSON, err := json.Marshal(profileData)
	if err != nil {
		log.Printf("Error encoding profile data: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
		return
	}
	
	// Add the JSON-encoded data to be used in the template with context-specific escaping
	data["profileData"] = template.JSEscapeString(string(profileJSON))
	
	// Create context-specific template functions
	funcMap := template.FuncMap{
		"jsCtx":       template.JSEscapeString,
		"htmlAttrCtx": html.EscapeString,
	}
	
	// Render the template with the custom function map
	// Note: util.SafeRender should be modified to accept and use the funcMap
	// This is a suggestion for the SafeRender implementation
	util.SafeRender(w, r, "template.xss2", data)
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
