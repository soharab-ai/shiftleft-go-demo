package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Added Content Security Policy header for defense in depth
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; object-src 'none'")
	
	// Using structured data approach with type information
	type DisplayData struct {
		Title   string
		Term    template.HTML // Will be safely rendered through html/template
		Value   string
		Details template.HTML // Will be safely rendered through html/template
	}
	
	data := DisplayData{
		Title: "Cross Site Scripting",
	}

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation before sanitization - only allow alphanumeric and some special chars
		validInput := regexp.MustCompile(`^[a-zA-Z0-9\s\-_.,!?]+$`)
		if term != "" && !validInput.MatchString(term) {
			term = "Invalid input characters"
		}

		if term == "sql injection" {
			term = "sqli"
		}

		// Create a custom restrictive Bluemonday policy instead of using UGCPolicy
		p := bluemonday.NewPolicy()
		p.AllowElements("b", "i") // Only allow minimal formatting elements
		sanitizedTerm := p.Sanitize(term)
		
		vulnDetails := GetExp(sanitizedTerm)

		if term == "" {
			// No term provided
			data.Term = ""
		} else if vulnDetails == "" {
			// Term not found
			notFoundText := fmt.Sprintf("<b><i>%s</i></b> not found", sanitizedTerm)
			// Use html/template to render HTML safely
			data.Value = sanitizedTerm
			data.Term = template.HTML(p.Sanitize(notFoundText)) // Context-specific encoding
		} else {
			// Term found
			vulnText := fmt.Sprintf("<b>%s</b>", sanitizedTerm)
			data.Value = sanitizedTerm
			data.Term = template.HTML(p.Sanitize(vulnText)) // Context-specific encoding
			data.Details = template.HTML(p.Sanitize(vulnDetails)) // Context-specific encoding
		}
	}
	
	// Use util.SafeRender, assuming it now uses html/template internally
	util.SafeRender(w, r, "template.xss1", data)
}



func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Replaced with a custom restrictive Bluemonday policy
	p := bluemonday.NewPolicy()
	// Only allow specific safe HTML elements and attributes
	p.AllowElements("b", "i", "p", "br", "ul", "ol", "li")
	p.AllowAttributes("class").OnElements("p", "div")
	
	// Input validation before sanitization
	validInput := regexp.MustCompile(`^[a-zA-Z0-9\s\-_.,!?<>/]+$`)
	if !validInput.MatchString(text) {
		return "Invalid content"
	}
	
	// Apply context-specific sanitization
	return p.Sanitize(text)
}


