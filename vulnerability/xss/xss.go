package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	data := make(map[string]interfacenull)
	
	// Added CSP headers for defense in depth
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	// Added CORS headers for additional security
	w.Header().Set("Access-Control-Allow-Origin", "yourdomain.com")

	if r.Method == "GET" {
		term := r.FormValue("term")
		originalTerm := term
		
		// Added input validation before sanitization
		if len(term) > 200 || regexp.MustCompile(`[<>]`).MatchString(term) {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		
		// Create custom bluemonday policy that only allows specifically needed tags
		policy := bluemonday.NewPolicy()
		policy.AllowElements("b", "i")
		policy.AllowStandardURLs()
		
		// Context-specific encoding
		htmlSafe := template.HTMLEscapeString(term)
		jsSafe := template.JSEscapeString(term)
		urlSafe := url.QueryEscape(term)
		
		// Apply sanitization
		sanitizedTerm := policy.Sanitize(term)
		
		// Log suspicious inputs for security monitoring
		if originalTerm != sanitizedTerm {
			log.Printf("Potentially malicious input sanitized: %s", originalTerm)
		}
		
		if term == "sql injection" {
			sanitizedTerm = "sqli"
		}

		// Use sanitized term for all operations
		vulnDetails := GetExp(sanitizedTerm)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use Go's html/template package with contextual auto-escaping
			var notFoundBuf, valueBuf bytes.Buffer
			
			notFoundTemplate := template.Must(template.New("notFound").Parse("<b><i>{{.}}</i></b> not found"))
			notFoundTemplate.Execute(&notFoundBuf, sanitizedTerm)
			
			valueTemplate := template.Must(template.New("value").Parse("{{.}}"))
			valueTemplate.Execute(&valueBuf, sanitizedTerm)
			
			data["value"] = valueBuf.String()
			data["term"] = notFoundBuf.String()
			
			// Store safe versions for different contexts
			data["termJS"] = jsSafe
			data["termURL"] = urlSafe
		} else {
			// Use Go's html/template package with contextual auto-escaping
			var vulnBuf bytes.Buffer
			vulnTemplate := template.Must(template.New("vuln").Parse("<b>{{.}}</b>"))
			vulnTemplate.Execute(&vulnBuf, sanitizedTerm)
			
			data["value"] = sanitizedTerm
			data["term"] = vulnBuf.String()
			data["details"] = vulnDetails
			
			// Store safe versions for different contexts
			data["termJS"] = jsSafe
			data["termURL"] = urlSafe
		}
	}
	
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Create custom bluemonday policy for maximum security
	policy := bluemonday.StrictPolicy()
	
	originalText := text
	sanitizedText := policy.Sanitize(text)
	
	// Log sanitization events for security auditing
	if originalText != sanitizedText {
		log.Printf("Script tag removal: potentially malicious content sanitized")
	}
	
	return sanitizedText
}

