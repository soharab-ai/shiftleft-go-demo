package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    // Set Content-Security-Policy header to restrict script execution
    w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
    w.Header().Set("X-XSS-Protection", "1; mode=block")
    w.Header().Set("X-Content-Type-Options", "nosniff")
    
    data := make(map[string]interfacenull)

    if r.Method == "GET" {
        // Extract only the specific data needed instead of passing the entire request
        term := r.FormValue("term")
        
        // Add stronger input validation before processing
        if !validateInput(term) {
            http.Error(w, "Invalid input", http.StatusBadRequest)
            return
        }

        // Always escape user input regardless of level
        term = html.EscapeString(term)

        // Create a strict policy that only allows safe HTML
        policy := bluemonday.UGCPolicy()
        
        if term == "sql injection" {
            term = "sqli"
        }

        term = removeScriptTag(term)
        // Apply bluemonday sanitization to the term
        term = policy.Sanitize(term)
        vulnDetails := GetExp(term)

        notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
        value := fmt.Sprintf("%s", term)

        if term == "" {
            data["term"] = ""
        } else if vulnDetails == "" {
            // Use regular strings instead of template.HTML to ensure proper escaping
            data["value"] = value
            data["term"] = notFound
        } else {
            vuln := fmt.Sprintf("<b>%s</b>", term)
            // Use regular strings instead of template.HTML
            data["value"] = value
            data["term"] = vuln
            data["details"] = vulnDetails
        }
    }
    data["title"] = "Cross Site Scripting"
    
    // Add template validation before rendering
    if !validateTemplateStructure("template.xss1") {
        http.Error(w, "Invalid template", http.StatusInternalServerError)
        return
    }
    
    // Modified: Don't pass the raw request object to the template rendering function
    RenderTemplateWithData(w, "template.xss1", data)
}

// New function to validate input
func validateInput(input string) bool {
    // Simple validation: reject inputs with potentially dangerous patterns
    dangerousPatterns := []string{
        "javascript:",
        "data:",
        "vbscript:",
        "<script",
        "onerror=",
        "onload=",
        "eval(",
        "document.cookie",
    }
    
    input = strings.ToLower(input)
    for _, pattern := range dangerousPatterns {
        if strings.Contains(input, pattern) {
            return false
        }
    }
    return true
}

// New function to validate template structure
func validateTemplateStructure(templateName string) bool {
    // In a real implementation, this would check that the template exists
    // and validate its structure against a known-good structure
    validTemplates := map[string]bool{
        "template.xss1": true,
        // Add other valid templates here
    }
    
    return validTemplates[templateName]
}

// Custom rendering function that doesn't expose request data to templates
func RenderTemplateWithData(w http.ResponseWriter, templateName string, data map[string]interfacenull) {
    // Call the original util.SafeRender but without passing the request object
    // In a real implementation, this would wrap the actual template rendering
    util.SafeRender(w, nil, templateName, data)
}

// Helper function to remove script tags (assuming it was defined elsewhere)
func removeScriptTag(s string) string {
    // Simple implementation to remove script tags
    re := regexp.MustCompile("(?i)<script[^>]*>.*?</script>")
    return re.ReplaceAllString(s, "")
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
