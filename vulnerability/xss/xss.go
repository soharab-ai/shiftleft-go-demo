package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// Define templates outside handler for better performance
var templates = template.Must(template.ParseFiles("path/to/templates/template.xss1.html"))

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Added Content Security Policy header for defense-in-depth
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; object-src 'none';")
	
	data := make(map[string]interfacenull)

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation before sanitization
		validTerm, err := validateInput(term)
		if err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		
		// Using a single, comprehensive sanitization approach with bluemonday
		p := bluemonday.NewPolicy()
		p.AllowStandardURLs()
		p.AllowStandardAttributes()
		p.AllowElements("b", "i", "p", "br", "span")
		sanitizedTerm := p.Sanitize(validTerm)
		
		// For JavaScript contexts if needed
		jsEncoder := bluemonday.NewPolicy()
		jsEncoder.AllowNone()
		jsEscapedTerm := jsEncoder.Sanitize(sanitizedTerm)
		
		// For URL contexts if needed
		urlEscapedTerm := url.QueryEscape(sanitizedTerm)
		
		if sanitizedTerm == "sql injection" {
			sanitizedTerm = "sqli"
		}

		vulnDetails := GetExp(sanitizedTerm)

		if sanitizedTerm == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Using proper data structure instead of string concatenation
			data["term"] = sanitizedTerm
			data["formatted"] = struct {
				Term string
				NotFound bool
			}{
				Term: sanitizedTerm,
				NotFound: true,
			}
			data["value"] = sanitizedTerm
		} else {
			// Using proper data structure instead of string concatenation
			data["term"] = sanitizedTerm
			data["formatted"] = struct {
				Term string
				Details string
				NotFound bool
			}{
				Term: sanitizedTerm,
				Details: vulnDetails,
				NotFound: false,
			}
			data["value"] = sanitizedTerm
			data["details"] = vulnDetails
			// Store JS and URL escaped versions if needed in templates
			data["jsEscapedTerm"] = jsEscapedTerm
			data["urlEscapedTerm"] = urlEscapedTerm
		}
	}
	
	data["title"] = "Cross Site Scripting"
	// Use HTML templates instead of manual rendering
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// This function is no longer needed as we're using bluemonday for comprehensive
	// sanitization, but keeping it for backward compatibility
	p := bluemonday.UGCPolicy()
	return p.Sanitize(text)
}

