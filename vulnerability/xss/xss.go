package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Added Content Security Policy header to prevent script execution
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'none'")
	
	data := make(map[string]interfacenull)
	
	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Added input validation before processing
		if len(term) > 100 {
			http.Error(w, "Input too long", http.StatusBadRequest)
			return
		}
		
		// Validate input using a strict pattern
		validInputPattern := regexp.MustCompile(`^[a-zA-Z0-9\s\-_.,]+$`)
		if term != "" && !validInputPattern.MatchString(term) {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}

		if term == "sql injection" {
			term = "sqli"
		}

		vulnDetails := GetExp(term)
		
		// Pass simple data to templates instead of HTML fragments
		data["term"] = term
		data["searchPerformed"] = term != ""
		data["found"] = vulnDetails != ""
		data["details"] = vulnDetails
	}
	
	data["title"] = "Cross Site Scripting"
	
	// Using html/template directly instead of util.SafeRender
	tmpl := template.Must(template.ParseFiles("templates/xss1.html"))
	err := tmpl.Execute(w, data)
	if err != nil {
		http.Error(w, "Template rendering error", http.StatusInternalServerError)
	}
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}
// This function is deprecated and should never be used as it provides a false sense of security
// It has been kept for backward compatibility but no handler should call it
func removeScriptTag(text string) string {
	// This regex approach is fundamentally flawed for XSS prevention
	// Proper context-aware escaping should be used via html/template
	// This function is maintained only for API compatibility
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}

}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
