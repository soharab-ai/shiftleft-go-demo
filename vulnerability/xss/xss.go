package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	data := make(map[string]interfacenull)

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation with whitelist approach before sanitization
		// Only allow alphanumeric characters and basic punctuation
		validInput := regexp.MustCompile(`^[a-zA-Z0-9\s\.,\-_!?]*$`)
		if !validInput.MatchString(term) {
			term = ""
		}

		// Apply sanitization consistently before any processing
		term = sanitizeInput(term)

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}
		
		if term == "sql injection" {
			term = "sqli"
		}

		vulnDetails := GetExp(term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Don't use string formatting, use plain strings and let template handle escaping
			data["value"] = term
			data["term"] = fmt.Sprintf("%s not found", term) // Text will be properly escaped by the template
		} else {
			data["value"] = term
			data["term"] = term
			data["details"] = vulnDetails
		}
	}
	
	// Enhanced security headers
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	
	data["title"] = "Cross Site Scripting"
	
	// Create template with custom security functions
	tmpl, err := template.New("template.xss1").Funcs(template.FuncMap{
		"safeHTML": func(s string) template.HTML {
			return template.HTML(getSanitizationPolicy().Sanitize(s))
		},
	}).ParseFiles("templates/template.xss1.html")
	
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		return
	}
	
	// Execute template with data
	err = tmpl.ExecuteTemplate(w, "template.xss1", data)
	if err != nil {
		http.Error(w, "Template execution error", http.StatusInternalServerError)
	}
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
// removeScriptTag is replaced by the more comprehensive sanitizeInput function
// This function is kept for backward compatibility but delegates to sanitizeInput
func removeScriptTag(text string) string {
    return sanitizeInput(text)
}

    
    // Trim whitespace first
    text = strings.TrimSpace(text)
    
    // Apply sanitization using a custom policy
    return getSanitizationPolicy().Sanitize(text)
}

			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
