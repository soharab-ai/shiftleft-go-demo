package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Enhanced CSP with more restrictive policy
	w.Header().Set("Content-Security-Policy", "default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; connect-src 'self'; form-action 'self';")
	
	// Additional security headers
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("Referrer-Policy", "strict-origin-when-cross-origin")
	
	// Use the new SafeTemplateData wrapper for enhanced template safety
	data := NewSafeTemplateData()

	if r.Method == "GET" {
		term := r.FormValue("term")

		// Input validation before sanitization
		if err := validateInput(term); err != nil {
			http.Error(w, "Invalid input", http.StatusBadRequest)
			return
		}
		
		// Apply context-specific sanitization for HTML context
		term = sanitizeUserInput(term, "html")
		
		if term == "sql injection" {
			term = "sqli"
		}

		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("%s not found", term)
		value := term

		if term == "" {
			data.SetValue("term", "")
		} else if vulnDetails == "" {
			data.SetValue("value", value)
			// Use regular strings to let Go templates handle escaping
			data.SetValue("term", notFound)
		} else {
			vuln := term
			data.SetValue("value", value)
			data.SetValue("term", vuln)
			data.SetValue("details", vulnDetails)
		}
	}
	data.SetValue("title", "Cross Site Scripting")
	util.SafeRender(w, r, "template.xss1", data.GetData())
}

// validateInput performs input validation before sanitization
func validateInput(input string) error {
	if len(input) > 1000 {
		return errors.New("input too long")
	}
	if regexp.MustCompile(`(?i)<script|javascript:|data:|vbscript:|file:`).MatchString(input) {
		return errors.New("potentially malicious input detected")
	}
	return nil
}

// sanitizeUserInput applies context-specific sanitization
func sanitizeUserInput(input string, context string) string {
	switch context {
	case "html":
		return bluemonday.StrictPolicy().Sanitize(input)
	case "url":
		return bluemonday.StripTagsPolicy().Sanitize(input)
	default:
		return bluemonday.UGCPolicy().Sanitize(input)
	}
}

// SafeTemplateData provides a wrapper for safe template data handling
type SafeTemplateData struct {
	rawData map[string]interfacenull
	safeKeys map[string]bool
}
// This function is now deprecated in favor of sanitizeUserInput
// It's kept for backward compatibility but should not be used for sanitization
func removeScriptTag(text string) string {
	// Use context-specific sanitization instead of simple regex replacement
	return sanitizeUserInput(text, "html")
}

		safeKeys: map[string]bool{
			// Define keys that are known to be safe for HTML rendering
			"safeHTML": true,
		},
	}
}

// SetValue sets a value in the safe template data
func (s *SafeTemplateData) SetValue(key string, value interfacenull) {
	s.rawData[key] = value
}

// GetHTML safely returns an HTML-rendered value only if the key is designated as safe
func (s *SafeTemplateData) GetHTML(key string) template.HTML {
	if val, ok := s.rawData[key]; ok && s.safeKeys[key] {
		return template.HTML(val.(string))
	}
	return template.HTML("")
}

// GetData returns the underlying data map
func (s *SafeTemplateData) GetData() map[string]interfacenull {
	return s.rawData
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
