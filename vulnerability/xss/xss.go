package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	data := make(map[string]interfacenull)

	// Add Content Security Policy header for defense-in-depth against XSS attacks
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; object-src 'none';")

	if r.Method == "GET" {
		// Extract input parameter
		term := r.FormValue("term")
		
		// Validate and sanitize input (separated from rendering logic)
		sanitizedTerm, err := validateAndSanitizeInput(term, r)
		if err != nil {
			log.Printf("Input sanitization error: %v", err)
			http.Error(w, "Invalid input detected", http.StatusBadRequest)
			return
		}

		if sanitizedTerm == "sql injection" {
			sanitizedTerm = "sqli"
		}

		vulnDetails := GetExp(sanitizedTerm)

		// Prepare data for rendering with proper context-specific encoding
		if sanitizedTerm == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			notFound := fmt.Sprintf("%s not found", sanitizedTerm)
			data["value"] = sanitizedTerm
			data["term"] = notFound // Go's auto-escaping will handle this safely
		} else {
			data["value"] = sanitizedTerm
			data["term"] = sanitizedTerm
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	
	// Using SafeRender which should properly escape all variables in templates
	if err := util.SafeRender(w, r, "template.xss1", data); err != nil {
		log.Printf("Template rendering error: %v", err)
		http.Error(w, "Internal server error", http.StatusInternalServerError)
	}
}

// Separate input validation service that can be unit tested independently
func validateAndSanitizeInput(input string, r *http.Request) (string, error) {
	if input == "" {
		return "", nil
	}
	
	// Type validation - implement comprehensive validation for specific data types
	if !isValidSearchTerm(input) {
		return "", errors.New("invalid search term format")
	}
	
	// Apply HTML escaping if high security level
	if util.CheckLevel(r) { // level = high
		input = HTMLEscapeString(input)
	}
	
	// Use StrictPolicy instead of UGCPolicy for more restrictive sanitization
	p := bluemonday.StrictPolicy()
	// Allow only specific HTML elements needed by the application
	p.AllowElements("b", "i")
	
	sanitizedInput := p.Sanitize(input)
	
	// Check if sanitization significantly changed the input, indicating potential malicious content
	if len(input)-len(sanitizedInput) > len(input)/2 && len(input) > 10 {
		return "", errors.New("potentially malicious content detected")
	}
	
	return sanitizedInput, nil
}

// Comprehensive validation for search terms
func isValidSearchTerm(term string) bool {
	// Allow alphanumeric, spaces, and limited punctuation
	// More specific than the simplistic regex approach
	pattern := regexp.MustCompile(`^[a-zA-Z0-9\s\.\,\-\_\(\)]{1,100}$`)
	return pattern.MatchString(term)
}

		}
	}
	
	// Explicit use of Go's template system with error handling
	tmpl, err := template.ParseFiles("templates/xss1.html")
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		log.Printf("Template parsing error: %v", err)
		return
	}
	
	// Execute template with proper error handling
	if err := tmpl.Execute(w, data); err != nil {
		http.Error(w, "Template rendering error", http.StatusInternalServerError)
		log.Printf("Template execution error: %v", err)
	}
}

// sanitizeInputWithCustomPolicy creates a custom policy allowing specific safe HTML elements
func sanitizeInputWithCustomPolicy(text string) (string, error) {
	// Create a custom policy that allows minimal formatting
	p := bluemonday.NewPolicy()
	// Allow standard URLs
	p.AllowStandardURLs()
	// Allow only specific HTML elements needed for the application
	p.AllowElements("b", "i", "strong", "em")
	
	// Sanitize and return the text
	return p.Sanitize(text), nil
}


		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", template.HTMLEscapeString(term))
		value := template.HTMLEscapeString(term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = value
			data["term"] = notFound
// This function is deprecated in favor of sanitizeInputWithCustomPolicy, but kept for API compatibility
func removeScriptTag(text string) string {
	// This function is deprecated and should not be used for security purposes
	// Use validateAndSanitizeInput instead
	log.Println("Warning: removeScriptTag is deprecated and does not provide adequate security")
	
	// This implementation is retained for backward compatibility
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}

// Context-specific encoding functions

// HTMLEncodeOutput specifically encodes content for HTML context
func HTMLEncodeOutput(content string) string {
	// Using bluemonday's StrictPolicy for HTML contexts
	p := bluemonday.StrictPolicy()
	return p.Sanitize(content)
}

// JSEncodeOutput specifically encodes content for JavaScript contexts
func JSEncodeOutput(content string) string {
	// Implement JavaScript-specific encoding
	// Replace all potentially dangerous characters with their Unicode equivalents
	replacer := strings.NewReplacer(
		"\\", "\\\\",
		"'", "\\'",
		"\"", "\\\"",
		"\n", "\\n",
		"\r", "\\r",
		"<", "\\u003c",
		">", "\\u003e",
		"&", "\\u0026",
		"=", "\\u003d",
		"-", "\\u002d",
		";", "\\u003b",
	)
	return replacer.Replace(content)
}

// URLEncodeOutput specifically encodes content for URL contexts
func URLEncodeOutput(content string) string {
	return url.QueryEscape(content)
}

	return sanitized
}

		}
	}
	data["title"] = "Cross Site Scripting"
	
	// Use enhanced SafeRender with strict contextual template settings
	util.SafeRenderWithContext(w, r, "template.xss1", data)
}

		vulnDetails := GetExp(term)

		// Apply context-specific encoding for different contexts
		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", html.EscapeString(term))
		value := html.EscapeString(term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use proper string to allow automatic HTML escaping
			data["value"] = value
			data["term"] = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", html.EscapeString(term))
			// Use proper string to allow automatic HTML escaping
			data["value"] = value
			data["term"] = vuln
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

// validateInputPattern validates input against a whitelist pattern
func validateInputPattern(input string) bool {
	// Allow alphanumeric characters, spaces and some basic punctuation
	pattern := regexp.MustCompile(`^[a-zA-Z0-9\s.,;:!?'"()\-]+$`)
	return pattern.MatchString(input) || input == ""
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Always sanitize user input regardless of security level
	uid := HTMLEscapeString(r.FormValue("uid"))

	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	// Using JSON for structured data passing
	jsonData, err := json.Marshal(map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	})
	
	if err != nil {
		log.Println("Error marshaling JSON:", err)
		// Provide empty JSON object in case of error
		jsonData = []byte("null")
	}
	
	// Set Content Security Policy header
	// Added CSP header to restrict script execution
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	
	data := make(map[string]interfacenull)
	data["title"] = "Cross Site Scripting"
	// Pass the JSON data to the template as a separate variable
	// instead of using unsafe conversions and inline JavaScript
	data["userDataJSON"] = string(jsonData)

	// Render template with proper context-aware autoescaping
	// The template is expected to use data attributes to handle user data safely:
	// <div id="user-data" data-user='{{.userDataJSON}}'></div>
	// <script>
	//   const userData = JSON.parse(document.getElementById('user-data').dataset.user);
	// </script>
	util.SafeRender(w, r, "template.xss2", data)
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Context-specific sanitization policy
	p := bluemonday.UGCPolicy()
	sanitized, err := sanitizeWithLogging(text, p)
	if err != nil {
		log.Printf("Warning: Sanitization failed for text: %s", text)
		return ""
	}
	return sanitized
}

