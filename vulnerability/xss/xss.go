package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Set comprehensive Content Security Policy header
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; connect-src 'self'; frame-src 'none'; object-src 'none'")
	
	// Set additional security headers
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("Set-Cookie", "session=value; HttpOnly; Secure; SameSite=Strict")

	data := make(map[string]interfacenull)

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation before sanitization using whitelist approach
		if !validateInputPattern(term) {
			term = "" // Reset invalid input
		}

		if util.CheckLevel(r) { // level = high
			// Context-specific HTML encoding
			term = html.EscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		// Create a custom, more restrictive bluemonday policy instead of UGCPolicy
		p := bluemonday.NewPolicy()
		p.AllowStandardURLs()
		p.AllowElements("b", "i", "p", "br", "ul", "li")
		p.AllowAttributes("href").OnElements("a")
		p.AllowAttributes("class").Globally()
		term = p.Sanitize(term)
		
		vulnDetails := GetExp(term)

		// Apply context-specific encoding for different contexts
		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", html.EscapeString(term))
		value := html.EscapeString(term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use proper string to allow automatic HTML escaping
			data["value"] = value
			data["term"] = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", html.EscapeString(term))
			// Use proper string to allow automatic HTML escaping
			data["value"] = value
			data["term"] = vuln
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

// validateInputPattern validates input against a whitelist pattern
func validateInputPattern(input string) bool {
	// Allow alphanumeric characters, spaces and some basic punctuation
	pattern := regexp.MustCompile(`^[a-zA-Z0-9\s.,;:!?'"()\-]+$`)
	return pattern.MatchString(input) || input == ""
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Always sanitize user input regardless of security level
	uid := HTMLEscapeString(r.FormValue("uid"))

	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	// Using JSON for structured data passing
	jsonData, err := json.Marshal(map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	})
	
	if err != nil {
		log.Println("Error marshaling JSON:", err)
		// Provide empty JSON object in case of error
		jsonData = []byte("null")
	}
	
	// Set Content Security Policy header
	// Added CSP header to restrict script execution
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	
	data := make(map[string]interfacenull)
	data["title"] = "Cross Site Scripting"
	// Pass the JSON data to the template as a separate variable
	// instead of using unsafe conversions and inline JavaScript
	data["userDataJSON"] = string(jsonData)

	// Render template with proper context-aware autoescaping
	// The template is expected to use data attributes to handle user data safely:
	// <div id="user-data" data-user='{{.userDataJSON}}'></div>
	// <script>
	//   const userData = JSON.parse(document.getElementById('user-data').dataset.user);
	// </script>
	util.SafeRender(w, r, "template.xss2", data)
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
