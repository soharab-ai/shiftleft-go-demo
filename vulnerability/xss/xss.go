package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    // Set proper Content-Type headers to prevent XSS
    w.Header().Set("Content-Type", "text/html; charset=utf-8")
    w.Header().Set("X-Content-Type-Options", "nosniff")
    // Added strong CSP header for defense-in-depth protection
    w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; object-src 'none';")

    data := make(map[string]interfacenull)

    if r.Method == "GET" {
        term := r.FormValue("term")

        // Always sanitize user input with custom policy
        term = sanitizeUserInput(term)
        
        // Add output encoding verification as secondary check
        if !verifyNoScriptContent(term) {
            term = html.EscapeString(term)
        }

        if term == "sql injection" {
            term = "sqli"
        }

        vulnDetails := GetExp(term)
        
        // Using template-based approach instead of string concatenation
        var notFoundBuf, termBuf bytes.Buffer
        
        // Define templates separately with proper context
        notFoundTmpl := template.Must(template.New("notFound").Parse(`<b><i>{{.}}</i></b> not found`))
        termTmpl := template.Must(template.New("term").Parse(`<b>{{.}}</b>`))
        
        // Value is safely escaped by default
        data["value"] = term

        if term == "" {
            data["term"] = ""
        } else if vulnDetails == "" {
            // Execute template with term in proper context
            notFoundTmpl.Execute(&notFoundBuf, term)
            data["term"] = notFoundBuf.String()
        } else {
            // Execute template with term in proper context
            termTmpl.Execute(&termBuf, term)
            data["term"] = termBuf.String()
            data["details"] = vulnDetails
        }
    }
    
    data["title"] = "Cross Site Scripting"
    
    // Replace util.SafeRender with direct template control
    renderTemplateWithSafeOptions(w, "template.xss1", data)
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
// This function is deprecated as it's replaced by sanitizeUserInput
// Using regex for HTML sanitization is not reliable
func removeScriptTag(text string) string {
    filter := regexp.MustCompile("<script*>.*</script>")
    output := filter.ReplaceAllString(text, "")
    return output
}


	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
