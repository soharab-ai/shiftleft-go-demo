package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Define a structured data object instead of using HTML strings directly
	data := make(map[string]interfacenull)
	
	// Add CSP header for additional XSS protection
	w.Header().Set("Content-Security-Policy", 
		"default-src 'self'; script-src 'self'; object-src 'none'; base-uri 'self'; frame-ancestors 'self';")
	
	// Set CSRF protection headers
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("X-Frame-Options", "DENY")

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation before sanitization - reject suspicious patterns
		if containsSuspiciousPatterns(term) {
			// Don't echo back the suspicious input - use a generic message
			data["error"] = "Input contains potentially malicious content and was rejected"
		} else {
			// Apply strict sanitization - using StrictPolicy instead of UGCPolicy
			sanitizedTerm := sanitizeInput(term)
			
			// Store the plain sanitized term directly - no HTML formatting
			data["rawTerm"] = sanitizedTerm
			
			// Special case handling without HTML
			if sanitizedTerm == "sql injection" {
				sanitizedTerm = "sqli"
			}
			
			vulnDetails := GetExp(sanitizedTerm)
			
			if sanitizedTerm == "" {
				// Just pass empty string, let template handle display logic
				data["term"] = ""
			} else if vulnDetails == "" {
				// Pass plain data to template and let it handle formatting
				data["termNotFound"] = true
				data["term"] = sanitizedTerm
			} else {
				// Pass plain data to template without HTML formatting
				data["termFound"] = true
				data["term"] = sanitizedTerm
				// Sanitize vulnerability details as well
				data["details"] = sanitizeInput(vulnDetails)
			}
		}
	}
	
	data["title"] = "Cross Site Scripting"
	// Use SafeRender which properly escapes template values
	util.SafeRender(w, r, "template.xss1", data)
}

// containsSuspiciousPatterns checks for obviously malicious content
func containsSuspiciousPatterns(input string) bool {
	suspiciousPatterns := []string{
		"<script", "javascript:", "onerror=", "onload=", "eval(", "document.cookie",
		"alert(", "prompt(", "confirm(", "on\\w+="
	}
	
	lowercaseInput := strings.ToLower(input)
	for _, pattern := range suspiciousPatterns {
		if strings.Contains(lowercaseInput, pattern) {
			return true
		}
	}
	return false
}

// sanitizeInput uses bluemonday's StrictPolicy for comprehensive sanitization
func sanitizeInput(input string) string {
	// Using StrictPolicy instead of UGCPolicy for more strict sanitization
	p := bluemonday.StrictPolicy()
	return p.Sanitize(input)
}

// This function is deprecated and should not be used directly
// It's kept for backward compatibility but uses the stricter sanitization
func removeScriptTag(text string) string {
	// Use the sanitizeInput function with StrictPolicy for comprehensive sanitization
	return sanitizeInput(text)
}

		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
