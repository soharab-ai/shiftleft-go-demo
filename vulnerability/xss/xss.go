package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {
		term := r.FormValue("term")

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(notFound) // vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")
	
	// Validate uid follows expected format (numeric only) - added proper validation
	if !regexp.MustCompile(`^[0-9]+$`).MatchString(uid) {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	// Generate a random nonce for CSP
	nonceBytes := make([]byte, 16)
	if _, err := rand.Read(nonceBytes); err != nil {
		http.Error(w, "Error generating security nonce", http.StatusInternalServerError)
		return
	}
	nonce := base64.StdEncoding.EncodeToString(nonceBytes)

	// Set security headers to protect against XSS and other attacks
	w.Header().Set("Content-Security-Policy", 
		"default-src 'self'; script-src 'self' 'nonce-"+nonce+"'; require-trusted-types-for 'script'; trusted-types default;")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	w.Header().Set("Referrer-Policy", "strict-origin-when-cross-origin")
	
	// Add CSRF protection token
	csrfToken := generateCSRFToken(r)
	w.Header().Set("X-CSRF-Token", csrfToken)

	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)

	if err != nil {
		// Sanitize error message before logging to prevent log injection
		sanitizer := bluemonday.StrictPolicy()
		sanitizedError := sanitizer.Sanitize(err.Error())
		log.Println(sanitizedError)
		http.Error(w, "Error processing data", http.StatusInternalServerError)
		return
	}

	// Create a map to hold the data for rendering
	data := make(map[string]interfacenull)
	
	// Create structured data for JSON encoding - safer approach for JS context
	jsData := map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	}
	
	// Properly encode the data as JSON to avoid XSS in JavaScript context
	jsonData, err := json.Marshal(jsData)
	if err != nil {
		http.Error(w, "Error processing data", http.StatusInternalServerError)
		return
	}
	
	// Apply context-aware escaping for JavaScript context
	jsonString := template.JSEscapeString(string(jsonData))
	
	// Set the page title
	data["title"] = "Cross Site Scripting"
	
	// Add JSON data as a string to be parsed by JavaScript
	data["jsonData"] = jsonString
	
	// Add the nonce for the script tags
	data["nonce"] = nonce
	
	// Add CSRF token to the template data
	data["csrfToken"] = csrfToken
	
	// Create a custom template with proper context handling
	tmpl := template.New("template.xss2")
	tmpl = tmpl.Funcs(template.FuncMap{
		"safeJS": func(s string) template.JS {
			return template.JS(s)
		},
	})
	
	// Instead of calling the generic util.SafeRender, use a more secure
	// custom rendering approach that respects contexts
	customTemplatePath := "templates/template.xss2.gohtml"
	tmpl, err = tmpl.ParseFiles(customTemplatePath)
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		return
	}
	
	err = tmpl.ExecuteTemplate(w, "template.xss2.gohtml", data)
	if err != nil {
		http.Error(w, "Template execution error", http.StatusInternalServerError)
		return
	}
}

// Helper function to generate CSRF token
func generateCSRFToken(r *http.Request) string {
	tokenBytes := make([]byte, 32)
	if _, err := rand.Read(tokenBytes); err != nil {
		// If we can't generate a secure token, return a static one (not ideal but prevents a crash)
		return "static-csrf-token-fallback"
	}
	return base64.StdEncoding.EncodeToString(tokenBytes)
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
