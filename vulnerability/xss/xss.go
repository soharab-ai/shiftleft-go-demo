package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	data := make(map[string]interfacenull)

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Input validation - only validate format, not sanitize here
		// Removed security level check to ensure consistent protection
		
		if term == "sql injection" {
			term = "sqli"
		}

		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := term

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = value
			data["term"] = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = value
			data["term"] = vuln
			data["details"] = vulnDetails
		}
	}
	data["title"] = "Cross Site Scripting"
	
	// Use template rendering with context-specific escaping
	renderTemplate(w, "template.xss1", data)
}

// renderTemplate handles template rendering with proper escaping
func renderTemplate(w http.ResponseWriter, tmplName string, data map[string]interfacenull) {
	// Create a custom sanitization policy tailored to application needs
	p := bluemonday.NewPolicy()
	p.AllowStandardURLs()
	p.AllowElements("b", "i", "em", "strong")
	// Add more allowed elements based on requirements
	
	// Create template with custom functions
	tmpl := template.New(tmplName).Funcs(template.FuncMap{
		"safeHTML": func(s string) template.HTML {
			// Only use this function when HTML needs to be rendered and is from a trusted source
			return template.HTML(p.Sanitize(s))
		},
	})
	
	// Parse the template (in a real implementation, templates should be parsed once at startup)
	tmpl, err := tmpl.ParseFiles("templates/" + tmplName + ".html")
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		return
	}
	
	// Execute the template with context-aware escaping
	if err := tmpl.Execute(w, data); err != nil {
		http.Error(w, "Template rendering error", http.StatusInternalServerError)
	}
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
// REMOVED: The removeScriptTag function has been completely removed as it was
// ineffective and marked as deprecated. All template rendering now uses proper
// contextual escaping through Go's template package.

// validateInput provides basic input validation for user input
// This is separate from output encoding, which is handled by the templating system
func validateInput(input string) bool {
	// Implement input validation rules based on expected format
	// For example, checking allowed characters, max length, etc.
	// Return true if valid, false if invalid
	
	// This is just a placeholder implementation
	if len(input) > 1000 {
		return false
	}
	return true
}

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
