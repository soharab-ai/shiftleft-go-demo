package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// TemplateData provides a structured type for template data
type TemplateData struct {
    Title       string
    TermText    string
    Value       string
    Found       bool
    Details     string
    IsSearching bool
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    // Implement Content Security Policy
    w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'none'")
    
    // Initialize structured data instead of untyped map
    templateData := TemplateData{
        Title: "Cross Site Scripting",
    }

    if r.Method == "GET" {
        // Initialize HTML sanitizer
        policy := bluemonday.UGCPolicy()
        
        term := r.FormValue("term")
        
        // Always sanitize input first - no HTML markup should be preserved
        term = policy.Sanitize(term)
        
        // Additional HTML escaping if high security level
        if util.CheckLevel(r) {
            term = html.EscapeString(term)
        }

        if term == "sql injection" {
            term = "sqli"
        }

        // Store raw text without any HTML markup
        templateData.TermText = term
        templateData.Value = term
        templateData.IsSearching = term != ""
        
        if term == "" {
            // Nothing to do, default state
        } else {
            vulnDetails := GetExp(term)
            if vulnDetails == "" {
                // Not found case - only pass data, no HTML
                templateData.Found = false
            } else {
                // Found case - only pass data, no HTML
                templateData.Found = true
                templateData.Details = vulnDetails
            }
        }
    }
    
    // Setup template functions for context-aware encoding
    funcMap := template.FuncMap{
        "attributeEscape": html.EscapeString,
        "urlPathEscape": url.PathEscape,
    }
    
    // Use SafeRenderWithFuncs (assuming this is a modified version of SafeRender that accepts FuncMap)
    // If SafeRenderWithFuncs doesn't exist, you would need to implement it or modify SafeRender
    util.SafeRenderWithFuncs(w, r, "template.xss1", templateData, funcMap)
}

		} else if vulnDetails == "" {
			// Term provided but not found
			data.Term = term
			data.Found = false
		} else {
			// Term found with details
			data.Term = term
			data.Details = vulnDetails
			data.Found = true
		}
	}
	
	// Use SafeRender which properly handles template rendering
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(input string) string {
    // Replace with proper sanitization using bluemonday
    policy := bluemonday.UGCPolicy()
    return policy.Sanitize(input)
}


