package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {
		term := r.FormValue("term")

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(notFound) // vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Set Content Security Policy header for defense-in-depth protection
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	
	uid := r.FormValue("uid")
	
	// Always sanitize input regardless of level
	uid = HTMLEscapeString(uid)
	
	// Validate input before processing
	if !isValidString(uid) {
		http.Error(w, "Invalid input format", http.StatusBadRequest)
		return
	}
	
	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)
	
	if err != nil {
		// Use secure logging - don't expose raw error messages
		log.Println("Error retrieving profile data: " + sanitizeLogMessage(err.Error()))
		http.Error(w, "An error occurred", http.StatusInternalServerError)
		return
	}
	
	// Validate returned data before processing
	if !isValidString(p.Name) || !isValidString(p.City) || !isValidString(p.PhoneNumber) {
		http.Error(w, "Invalid data format", http.StatusBadRequest)
		return
	}
	
	// Create a sanitization policy
	sanitizer := bluemonday.UGCPolicy()
	
	// Create data structure for the template
	data := make(map[string]interfacenull)
	
	// Add basic strings that don't need sanitization
	data["title"] = "Cross Site Scripting"
	
	// Create a safe data structure for JavaScript consumption
	userData := map[string]string{
		"uid": uid,
		"name": p.Name,
		"city": p.City,
		"phoneNumber": p.PhoneNumber,
	}
	
	// Sanitize each field individually for HTML contexts
	data["uid"] = sanitizer.Sanitize(uid)
	data["name"] = sanitizer.Sanitize(p.Name)
	data["city"] = sanitizer.Sanitize(p.City)
	data["phoneNumber"] = sanitizer.Sanitize(p.PhoneNumber)
	
	// JSON encode data for JavaScript consumption instead of inline script
	jsonData, err := json.Marshal(userData)
	if err != nil {
		log.Println("Error encoding JSON: " + sanitizeLogMessage(err.Error()))
		http.Error(w, "An error occurred", http.StatusInternalServerError)
		return
	}
	
	data["jsonData"] = string(jsonData)
	
	// Use Go's context-aware template system
	// The template should be updated to use data attributes instead of inline scripts:
	// <div data-user-info="{{.jsonData}}"></div>
	// <script src="/static/js/safe-user-handler.js"></script>
	
	util.SafeRender(w, r, "template.xss2", data)
}

// isValidString performs validation on input strings
func isValidString(s string) bool {
	// Implement appropriate validation logic
	// This is a simple example - expand as needed
	return len(s) < 100 && len(s) > 0
}

// sanitizeLogMessage sanitizes error messages before logging
func sanitizeLogMessage(message string) string {
	// Implement appropriate log sanitization
	// This is a simple implementation - consider more robust solutions
	sanitizer := bluemonday.UGCPolicy()
	return sanitizer.Sanitize(message)
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
