package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Initialize data map
	data := make(map[string]interfacenull)
	
	// Generate random nonce for CSP
	nonce := generateRandomNonce()
	
	// Set security headers for XSS protection
	// Added comprehensive CSP with nonce for script handling
	w.Header().Set("Content-Security-Policy", 
		"default-src 'self'; script-src 'self' 'nonce-"+nonce+"'; style-src 'self'; img-src 'self'; frame-ancestors 'none'; form-action 'self'")
	// Added explicit Content-Type header with charset to prevent content-sniffing
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	
	// Add nonce to template data
	data["nonce"] = nonce

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Create context-specific sanitization policies
		bodyPolicy := bluemonday.UGCPolicy()
		attrPolicy := bluemonday.NewPolicy()
		attrPolicy.AllowStandardURLs()
		
		// Apply consistent sanitization first
		sanitizedTerm := bodyPolicy.Sanitize(term)
		
		// Then apply business logic transformations
		if sanitizedTerm == "sql injection" {
			sanitizedTerm = "sqli"
		}

		vulnDetails := GetExp(sanitizedTerm)

		// Avoid using html.EscapeString (redundant with bluemonday)
		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", sanitizedTerm)
		value := sanitizedTerm

		if sanitizedTerm == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use sanitizedTerm directly - already safe
			data["value"] = value
			data["term"] = notFound 
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", sanitizedTerm)
			data["value"] = value
			data["term"] = vuln
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	
	// Use explicit template with auto-escaping enabled
	renderSafeTemplate(w, "template.xss1", data)
}

// Helper function to generate a random nonce for CSP
func generateRandomNonce() string {
	nonceBytes := make([]byte, 16)
	rand.Read(nonceBytes)
	return base64.StdEncoding.EncodeToString(nonceBytes)
}

// Safer template rendering with explicit auto-escaping
func renderSafeTemplate(w http.ResponseWriter, templateName string, data map[string]interfacenull) {
	// Create template with explicit escaping functions
	tmpl := template.New(templateName).Funcs(template.FuncMap{
		"safeHTML": func(s string) template.HTML {
			// Use this function only when needed with caution
			return template.HTML(bluemonday.UGCPolicy().Sanitize(s))
		},
	})
	
	// Delegate to the original rendering function
// Deprecated: This function is maintained only for backward compatibility.
// Use bluemonday sanitization library directly instead.
// Example: bluemonday.UGCPolicy().Sanitize(text)
func removeScriptTag(text string) string {
	// Improved implementation using bluemonday
	p := bluemonday.UGCPolicy()
	return p.Sanitize(text)
}

		
		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", sanitizedTerm)
		value := sanitizedTerm

		if term == "" {
			templateData.Term = ""
		} else if vulnDetails == "" {
			templateData.Value = value
			templateData.Term = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", sanitizedTerm)
			templateData.Value = value
			templateData.Term = vuln
			templateData.Details = vulnDetails
		}
	}
	
	// Map structured data to the template data map
	data["title"] = templateData.Title
	data["term"] = templateData.Term
	data["value"] = templateData.Value
	data["details"] = templateData.Details
	
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Implement input validation before sanitization
	if len(text) > 10000 {
		text = text[:10000] // Limit input length to prevent DoS
	}
	
	// Using custom bluemonday policy instead of regex for more robust sanitization
	p := bluemonday.NewPolicy()
	// Only allow specific elements needed for the application
	p.AllowElements("b", "i", "p", "br", "hr")
	// Disallow all attributes by default
	p.AllowStandardURLs()
	
	return p.Sanitize(text)
}

