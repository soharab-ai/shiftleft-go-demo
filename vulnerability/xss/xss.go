package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Improved CSP with more restrictive settings
	w.Header().Set("Content-Security-Policy", "default-src 'none'; style-src 'self'; img-src 'self'; connect-src 'self'")
	
	data := make(map[string]interfacenull)
	data["title"] = "Cross Site Scripting"

	if r.Method == "GET" {
		term := r.FormValue("term")
		
		// Store the original term as plain text, let templates handle HTML formatting
		data["searchTerm"] = term
		
		if term != "" {
			// Special case handling without HTML formatting
			if term == "sql injection" {
				term = "sqli"
			}
			
			// Sanitize the term with custom policy that allows minimal formatting
			sanitizedTerm, err := sanitizeInputWithCustomPolicy(term)
			if err != nil {
				// Log the error but continue with safe fallback
				log.Printf("Error sanitizing input: %v", err)
				sanitizedTerm = ""
			}
			
			// Store all data as plain text
			vulnDetails := GetExp(sanitizedTerm)
			
			if vulnDetails == "" {
				// Set flags for template to handle formatting
				data["found"] = false
			} else {
				// Store plain data and flags for template
				data["found"] = true
				data["details"] = vulnDetails
			}
		}
	}
	
	// Explicit use of Go's template system with error handling
	tmpl, err := template.ParseFiles("templates/xss1.html")
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		log.Printf("Template parsing error: %v", err)
		return
	}
	
	// Execute template with proper error handling
	if err := tmpl.Execute(w, data); err != nil {
		http.Error(w, "Template rendering error", http.StatusInternalServerError)
		log.Printf("Template execution error: %v", err)
	}
}

// sanitizeInputWithCustomPolicy creates a custom policy allowing specific safe HTML elements
func sanitizeInputWithCustomPolicy(text string) (string, error) {
	// Create a custom policy that allows minimal formatting
	p := bluemonday.NewPolicy()
	// Allow standard URLs
	p.AllowStandardURLs()
	// Allow only specific HTML elements needed for the application
	p.AllowElements("b", "i", "strong", "em")
	
	// Sanitize and return the text
	return p.Sanitize(text), nil
}


		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", template.HTMLEscapeString(term))
		value := template.HTMLEscapeString(term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = value
			data["term"] = notFound
// This function is deprecated in favor of sanitizeInputWithCustomPolicy, but kept for API compatibility
func removeScriptTag(text string) string {
	sanitized, err := sanitizeInputWithCustomPolicy(text)
	if err != nil {
		// Log error and fall back to strict policy on error
		log.Printf("Error in removeScriptTag: %v", err)
		p := bluemonday.StrictPolicy()
		return p.Sanitize(text)
	}
	return sanitized
}

		}
	}
	data["title"] = "Cross Site Scripting"
	
	// Use enhanced SafeRender with strict contextual template settings
	util.SafeRenderWithContext(w, r, "template.xss1", data)
}

		vulnDetails := GetExp(term)

		// Apply context-specific encoding for different contexts
		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", html.EscapeString(term))
		value := html.EscapeString(term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			// Use proper string to allow automatic HTML escaping
			data["value"] = value
			data["term"] = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", html.EscapeString(term))
			// Use proper string to allow automatic HTML escaping
			data["value"] = value
			data["term"] = vuln
			data["details"] = vulnDetails
		}
	}
	
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

// validateInputPattern validates input against a whitelist pattern
func validateInputPattern(input string) bool {
	// Allow alphanumeric characters, spaces and some basic punctuation
	pattern := regexp.MustCompile(`^[a-zA-Z0-9\s.,;:!?'"()\-]+$`)
	return pattern.MatchString(input) || input == ""
}


func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Always sanitize user input regardless of security level
	uid := HTMLEscapeString(r.FormValue("uid"))

	p := sqli.NewProfile()
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	// Using JSON for structured data passing
	jsonData, err := json.Marshal(map[string]interfacenull{
		"id":          uid,
		"name":        p.Name,
		"city":        p.City,
		"phoneNumber": p.PhoneNumber,
	})
	
	if err != nil {
		log.Println("Error marshaling JSON:", err)
		// Provide empty JSON object in case of error
		jsonData = []byte("null")
	}
	
	// Set Content Security Policy header
	// Added CSP header to restrict script execution
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	
	data := make(map[string]interfacenull)
	data["title"] = "Cross Site Scripting"
	// Pass the JSON data to the template as a separate variable
	// instead of using unsafe conversions and inline JavaScript
	data["userDataJSON"] = string(jsonData)

	// Render template with proper context-aware autoescaping
	// The template is expected to use data attributes to handle user data safely:
	// <div id="user-data" data-user='{{.userDataJSON}}'></div>
	// <script>
	//   const userData = JSON.parse(document.getElementById('user-data').dataset.user);
	// </script>
	util.SafeRender(w, r, "template.xss2", data)
}


func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Context-specific sanitization policy
	p := bluemonday.UGCPolicy()
	sanitized, err := sanitizeWithLogging(text, p)
	if err != nil {
		log.Printf("Warning: Sanitization failed for text: %s", text)
		return ""
	}
	return sanitized
}

