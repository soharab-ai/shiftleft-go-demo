package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {
		term := r.FormValue("term")

		if util.CheckLevel(r) { // level = high
			term = HTMLEscapeString(term)
		}

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(notFound) // vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = template.HTML(value)
			data["term"] = template.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// TemplateData defines a structured type to replace interfacenull for template data
type TemplateData struct {
	UID          string
	ProfileName  string
	ProfileCity  string
	ProfilePhone string
	Title        string
	UserDataJSON string
}

// validUID validates the format of the user ID
func validUID(uid string) bool {
	// Assuming UID should be alphanumeric and have reasonable length
	match, _ := regexp.MatchString("^[a-zA-Z0-9]{1,64}$", uid)
	return match
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Add Content Security Policy header
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'; object-src 'none'")
	
	uid := r.FormValue("uid")
	
	// Add validation before escaping
	if !validUID(uid) {
		http.Error(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}
	
	// Always sanitize input regardless of security level
	uid = HTMLEscapeString(uid)

	p := sqli.NewProfile() // using sqli get profile module
	
	// Improved error handling
	if err := p.SafeQueryGetData(uid); err != nil {
		log.Printf("Error retrieving user data: %s", err.Error())
		http.Error(w, "Error retrieving user data", http.StatusInternalServerError)
		return
	}

	// Create a structured data object instead of using map[string]interfacenull
	data := TemplateData{
		UID:          uid,
		ProfileName:  p.Name,
		ProfileCity:  p.City,
		ProfilePhone: p.PhoneNumber,
		Title:        "Cross Site Scripting",
	}

	// Create a safe JSON structure to pass to client-side JavaScript
	userData := map[string]string{
		"uid":   uid,
		"name":  p.Name,
		"city":  p.City,
		"phone": p.PhoneNumber,
	}
	
	userDataJSON, err := json.Marshal(userData)
	if err != nil {
		log.Printf("Error marshaling user data to JSON: %s", err.Error())
		http.Error(w, "Error processing user data", http.StatusInternalServerError)
		return
	}
	
	// Store the JSON data to be used with data attributes instead of inline scripts
	data.UserDataJSON = string(userDataJSON)
	
	// Use the SafeRender function to render the template
	util.SafeRender(w, r, "template.xss2", data)
	
	// Note: The HTML template should be updated to:
	// 1. Remove any inline JavaScript
	// 2. Include an external JS file: <script src="/static/js/user-profile.js"></script>
	// 3. Add a data attribute: <div id="user-data" data-user-info="{{.UserDataJSON}}"></div>
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
