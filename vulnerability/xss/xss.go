package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// Define a struct for template data to ensure type safety
type XSSTemplateData struct {
	Title   string
	Term    string
	Value   string
	Details string
	Found   bool
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Set Content-Security-Policy header for additional XSS protection
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'self'")
	
	// Initialize template data with type safety
	data := XSSTemplateData{
		Title: "Cross Site Scripting",
	}

	if r.Method == "GET" {
		term := r.FormValue("term")

		// Apply context-specific sanitization - StrictPolicy for search terms
		// This removes all HTML and ensures we have plain text
		policy := bluemonday.StrictPolicy()
		term = policy.Sanitize(term)

		if term == "sql injection" {
			term = "sqli"
		}

		// Store the plain text term
		data.Value = term
		
		// Get vulnerability details for the term
		vulnDetails := GetExp(term)

		if term == "" {
			// No term provided, leave fields empty
		} else if vulnDetails == "" {
			// Term provided but not found
			data.Term = term
			data.Found = false
		} else {
			// Term found with details
			data.Term = term
			data.Details = vulnDetails
			data.Found = true
		}
	}
	
	// Use SafeRender which properly handles template rendering
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// This function is kept for backward compatibility
	// The main code now uses bluemonday for sanitization instead
	// Using bluemonday is preferred over custom regex filters
	policy := bluemonday.UGCPolicy()
	return policy.Sanitize(text)
}

