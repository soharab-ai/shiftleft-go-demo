package xss

import (
	"fmt"
	"html"
	"html/template"
	"log"
	"net/http"
	"regexp"

	"github.com/julienschmidt/httprouter"

	"github.com/ShiftLeftSecurity/shiftleft-go-demo/util"
	// "github.com/ShiftLeftSecurity/shiftleft-go-demo/util/middleware"
	"github.com/ShiftLeftSecurity/shiftleft-go-demo/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (XSS) SetRouter(r *httprouter.Router) {
	// mw := middleware.New()
	// r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	// r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
	r.GET("/xss1", xss1Handler)
	r.POST("/xss1", xss1Handler)
	r.GET("/xss2", xss2Handler)
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
// Define a struct for template data to separate response structure from raw user input
type TemplateData struct {
	Title   string
	Term    string
	Value   string
	Details string
}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	// Add security headers as defense-in-depth approach
	w.Header().Set("Content-Security-Policy", "default-src 'self'; script-src 'none'")
	w.Header().Set("X-XSS-Protection", "1; mode=block")
	w.Header().Set("X-Content-Type-Options", "nosniff")
	
	data := make(map[string]interfacenull)
	templateData := TemplateData{Title: "Cross Site Scripting"}

	if r.Method == "GET" {
		// Initialize custom HTML sanitizer with specific allowed elements instead of generic UGC policy
		p := bluemonday.NewPolicy()
		// Only allow specific elements needed for rendering
		p.AllowElements("b", "i")
		p.AllowStandardURLs()
		
		term := r.FormValue("term")
		
		// Implement input validation before sanitization
		if len(term) > 200 {
			term = term[:200] // Limit input length to prevent excessive processing
		}
		
		// Sanitize with our custom policy - no need for redundant HTMLEscapeString
		sanitizedTerm := p.Sanitize(term)
		
		if term == "sql injection" {
			sanitizedTerm = "sqli"
		}

		vulnDetails := GetExp(sanitizedTerm)
		
		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", sanitizedTerm)
		value := sanitizedTerm

		if term == "" {
			templateData.Term = ""
		} else if vulnDetails == "" {
			templateData.Value = value
			templateData.Term = notFound
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", sanitizedTerm)
			templateData.Value = value
			templateData.Term = vuln
			templateData.Details = vulnDetails
		}
	}
	
	// Map structured data to the template data map
	data["title"] = templateData.Title
	data["term"] = templateData.Term
	data["value"] = templateData.Value
	data["details"] = templateData.Details
	
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	uid := r.FormValue("uid")

	if util.CheckLevel(r) { // level = high
		uid = HTMLEscapeString(uid)
	}

	p := sqli.NewProfile() // using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` // here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = template.HTML(inlineJS) // this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)
}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	// Implement input validation before sanitization
	if len(text) > 10000 {
		text = text[:10000] // Limit input length to prevent DoS
	}
	
	// Using custom bluemonday policy instead of regex for more robust sanitization
	p := bluemonday.NewPolicy()
	// Only allow specific elements needed for the application
	p.AllowElements("b", "i", "p", "br", "hr")
	// Disallow all attributes by default
	p.AllowStandardURLs()
	
	return p.Sanitize(text)
}

